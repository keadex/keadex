import { Diagram, DiagramListener } from '@keadex/c4-model-ui-kit'
import { ProjectSettings } from '@keadex/keadex-mina/src/models/autogenerated/ProjectSettings'
import {
  DiagramDesignView,
  DiagramDesignViewCommands,
} from '@keadex/keadex-mina/src/views/DiagramEditor/DiagramDesignView/DiagramDesignView'
import {
  ContextMenu,
  DropdownMenu,
  DropdownMenuItemProps,
  useAppBootstrap,
} from '@keadex/keadex-ui-kit/cross'
import { initConsole } from '@keadex/keadex-utils'
import { useEffect, useRef, useState } from 'react'
import { downloadDiagramData } from '../../core/core'
import {
  diagram_url_from_link_string,
  open_remote_diagram,
} from '../../../src-rust/pkg'

export interface MinaReactProps {
  projectRootUrl: string
  diagramUrl: string
  ghToken?: string
}

initConsole()

export const MinaReact = (props: MinaReactProps) => {
  const { projectRootUrl, diagramUrl, ghToken } = props

  async function initializeTailwindElements() {
    const { initTE, Dropdown } = await import('tw-elements')
    await initTE({ Dropdown })
  }

  useAppBootstrap({ initTE: initializeTailwindElements })

  const diagramDesignViewRef = useRef<DiagramDesignViewCommands>(null)
  const [diagram, setDiagram] = useState<Diagram | null>()
  const [projectSettings, setProjectSettings] =
    useState<ProjectSettings | null>()
  const [error, setError] = useState<string | null>()

  const listener: DiagramListener = {
    onOpenDiagramClick: (link) => {
      let diagramUrl
      try {
        diagramUrl = diagram_url_from_link_string(projectRootUrl, link)
      } catch (e) {
        console.error(e)
        setErrorState(
          'Invalid URL: the provided URL is an invalid Mina project or diagram.',
        )
      }
      if (diagramUrl) openDiagram(diagramUrl)
    },
    onOpenExternalLinkClick: (externalLink: string) => {
      window.open(externalLink, '_blank')
    },
  }

  function setErrorState(error: string | null) {
    setDiagram(null)
    setError(error)
  }

  async function openDiagram(diagramUrl: string) {
    diagramDesignViewRef.current?.resetCanvas()
    let diagramData
    try {
      diagramData = await downloadDiagramData(
        projectRootUrl,
        diagramUrl,
        ghToken,
      )
    } catch (e) {
      const error = e as Error
      if (error.message && error.message.replace(/ /g, '').length > 0) {
        setErrorState(error.message)
      } else {
        throw new Error()
      }
    }
    if (
      diagramData?.projectSettingsJson &&
      diagramData?.plantuml &&
      diagramData?.spec
    ) {
      try {
        setProjectSettings(
          JSON.parse(diagramData.projectSettingsJson) as ProjectSettings,
        )
        const remote_diagram = (await open_remote_diagram(
          projectRootUrl,
          diagramUrl,
          diagramData.plantuml,
          diagramData.spec,
        )) as Diagram
        setDiagram(remote_diagram)
      } catch (e) {
        setErrorState('Invalid diagram or project settings.')
      }
    }
  }

  useEffect(() => {
    setErrorState(null)
    openDiagram(diagramUrl)
  }, [diagramUrl, projectRootUrl, ghToken])

  // Workaround to initialize TW Elements dropdown
  const menuItems: DropdownMenuItemProps[] = [
    {
      id: 'dropdown-init',
      label: '',
      isHeaderMenuItem: true,
      subMenuItems: [
        {
          id: `dropdown-init-1`,
          label: '',
        },
      ],
    },
  ]

  return (
    <div className="h-full w-full border-t flex items-center">
      <DropdownMenu menuItemsProps={menuItems} className="hidden" />
      <ContextMenu />
      {error === null && diagram && (
        <DiagramDesignView
          diagramListener={listener}
          diagram={diagram}
          ref={diagramDesignViewRef}
          diagramsThemeSettings={
            projectSettings?.themes_settings?.diagrams_theme_settings
          }
          target="web"
          readOnly
        />
      )}
      {error && <div className="w-full text-center text-black">{error}</div>}
    </div>
  )
}

export default MinaReact
