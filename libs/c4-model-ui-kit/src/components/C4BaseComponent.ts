import {
  DropdownMenuItemProps,
  GENERIC_EVENTS,
  KeadexCanvas,
  KeadexContextMenuEvent,
} from '@keadex/keadex-ui-kit/cross'
import { cloneDeep } from '@keadex/keadex-utils'
import { fabric } from 'fabric'
import { IEvent } from 'fabric/fabric-impl'
import {
  CANVAS_EVENTS,
  MOUSE_EVENTS,
  OBJECT_EVENTS,
} from '../constants/fabric-events'
import {
  boundaryDiagramElement,
  componentDiagramElement,
  containerDiagramElement,
  deploymentNodeDiagramElement,
  softwareSystemDiagramElement,
} from '../helper/diagram-helper'
import { getMinZIndex, getZIndexOfObject } from '../helper/fabric-helper'
import { Boundary } from '../models/autogenerated/Boundary'
import { Component } from '../models/autogenerated/Component'
import { Container } from '../models/autogenerated/Container'
import { DeploymentNode } from '../models/autogenerated/DeploymentNode'
import { DiagramElementSpec } from '../models/autogenerated/DiagramElementSpec'
import { DiagramOrientation } from '../models/autogenerated/DiagramOrientation'
import { ElementData } from '../models/autogenerated/ElementData'
import { ElementType } from '../models/autogenerated/ElementType'
import { Person } from '../models/autogenerated/Person'
import { Relationship } from '../models/autogenerated/Relationship'
import { ShapeType } from '../models/autogenerated/ShapeType'
import { SoftwareSystem } from '../models/autogenerated/SoftwareSystem'

//--------- BEGIN EXTEND FABRIC.JS TO ADD "VIRTUAL GROUP" CAPABILITIES
export interface DiagramListener {
  onOpenDiagramClick: (diagramLink: string) => void
  onSelectElementCode?: (
    diagramElement: C4BaseComponentData | undefined,
    elementType: ElementType | undefined,
    diagramElementLevel: number,
  ) => void
}

export interface IVirtualGroup {
  parent?: fabric.Object
  children?: fabric.Object[]
  isVirtualGroupRoot: () => boolean
  isVirtualGroupParent: () => boolean
  isVirtualGroupChild: () => boolean
  isVirtualGroupLeaf: () => boolean
  isVirtualGroupBaseShape: () => boolean
  getVirtualGroupRoot: () => C4BaseComponent | undefined
}

declare global {
  // eslint-disable-next-line @typescript-eslint/no-namespace
  namespace fabric {
    interface Object extends IVirtualGroup {
      data?: C4BaseComponentRawData
    }

    interface Canvas {
      diagramListener?: DiagramListener
      autoLayoutEnabled?: boolean
      autoLayoutOrientation?: DiagramOrientation
      codingFeaturesEnabled?: boolean
    }
  }
}

fabric.ActiveSelection.prototype._controlsVisibility = {
  tl: true,
  tr: true,
  br: true,
  bl: true,
  ml: false,
  mt: false,
  mr: false,
  mb: false,
  mtr: false,
}

fabric.Object.prototype.isVirtualGroupParent = function () {
  return this.children !== undefined && this.children.length > 0
}

fabric.Object.prototype.isVirtualGroupChild = function () {
  return this.parent !== undefined
}

fabric.Object.prototype.isVirtualGroupRoot = function () {
  return this.isVirtualGroupParent() && this.parent === undefined
}

fabric.Object.prototype.isVirtualGroupLeaf = function () {
  return this.isVirtualGroupChild() && !this.isVirtualGroupParent()
}

fabric.Object.prototype.isVirtualGroupBaseShape = function () {
  // If this object is the first children on the parent, then this is
  // the base shape of the object (e.g. the rectangle in C4BaseElasticContainer)
  return this.isVirtualGroupChild() && this.parent!.children![0] === this
}

fabric.Object.prototype.getVirtualGroupRoot = function ():
  | C4BaseComponent
  | undefined {
  let virtualGroupRoot = this.parent as C4BaseComponent
  while (virtualGroupRoot && virtualGroupRoot.parent) {
    virtualGroupRoot = virtualGroupRoot.parent as C4BaseComponent
  }
  return virtualGroupRoot
}
//--------- END EXTEND FABRIC.JS TO ADD "VIRTUAL GROUP" CAPABILITIES

export type C4BaseComponentData = Partial<Boundary> &
  Partial<Container> &
  Partial<Component> &
  Partial<DeploymentNode> &
  Partial<Person> &
  Partial<Relationship> &
  Partial<SoftwareSystem>

export interface C4BaseComponentOptions {
  bgColor: string
  borderColor: string
  textColor: string
  strokeDashArray?: number[]
}

export interface C4BaseComponentRawData {
  rawDiagramElementSpec: DiagramElementSpec | undefined
  rawData?: C4BaseComponentData
}

export interface IC4BaseComponent {
  getUpdatedSpecs: () => DiagramElementSpec | undefined
}

export class ExtendedPoint extends fabric.Point {
  customType: ShapeType | undefined
  data?: C4BaseComponentRawData

  constructor(x: number, y: number, customType: ShapeType) {
    super(x, y)
    this.customType = customType
  }
}

export class VirtualGroupSelection extends fabric.ActiveSelection {}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const isC4Component = (object: any): object is IC4BaseComponent => {
  return 'getUpdatedSpecs' in object
}

export class C4BaseComponent extends fabric.Group implements IC4BaseComponent {
  constructor(
    data: C4BaseComponentData | undefined,
    elementSpec: DiagramElementSpec | undefined,
    defaults: DiagramElementSpec,
    autoLayout: Record<string, ElementData>,
    objects: fabric.Object[],
    options?: fabric.IGroupOptions,
    parent?: C4BaseComponent,
    children?: C4BaseComponent[],
    customOnMouseUp = false,
  ) {
    super(objects, {
      data: {
        rawDiagramElementSpec: elementSpec,
        rawData: data,
      },
      name: defaults.alias ?? 'undefined',
      left:
        elementSpec?.position?.left !== undefined
          ? elementSpec?.position?.left
          : defaults.position?.left,
      top:
        elementSpec?.position?.top !== undefined
          ? elementSpec?.position?.top
          : defaults.position?.top,
      scaleX:
        elementSpec?.size?.scale_x !== undefined
          ? elementSpec?.size?.scale_x
          : 1,
      scaleY:
        elementSpec?.size?.scale_y !== undefined
          ? elementSpec?.size?.scale_y
          : 1,
      ...options,
    })
    this.parent = parent
    this.children = children ?? []
    this.setControlsVisibility({
      mb: false,
      ml: false,
      mr: false,
      mt: false,
      mtr: false,
    })

    if (!customOnMouseUp) {
      this.on(OBJECT_EVENTS.MOUSE_UP, (event) => {
        this.onComponentMouseUp(event.target?.canvas, event, this)
      })
    }
  }

  getUpdatedSpecs(): DiagramElementSpec | undefined {
    // Discard active objects, because when selecting multiple objects,
    // a fabric.ActiveSelection is created, that is a group containing
    // all the selected objects. In this case new scale, positions, etc.
    // of each child are updated only when deselecting them.
    this.canvas?.discardActiveObject()

    const oldDiagramElementSpec = this.data?.rawDiagramElementSpec
    if (oldDiagramElementSpec) {
      const newDiagramElementSpec = cloneDeep(oldDiagramElementSpec)
      newDiagramElementSpec.position = {
        left: this.left ?? oldDiagramElementSpec.position?.left,
        top: this.top ?? oldDiagramElementSpec.position?.top,
        z_index:
          getZIndexOfObject(this.canvas, this) ??
          oldDiagramElementSpec.position?.z_index,
        angle: this.angle ?? oldDiagramElementSpec.position?.angle,
      }
      newDiagramElementSpec.size = {
        width: this.width ?? oldDiagramElementSpec.size?.width,
        height: this.height ?? oldDiagramElementSpec.size?.height,
        scale_x: this.scaleX ?? oldDiagramElementSpec.size?.scale_x,
        scale_y: this.scaleY ?? oldDiagramElementSpec.size?.scale_y,
      }
      return newDiagramElementSpec
    } else {
      // TODO - create if not defined spec
    }
    return
  }

  onComponentMouseUp(
    canvas: fabric.Canvas | undefined,
    event: IEvent<Event>,
    selectedObject: fabric.Object,
    contextMenuItems?: DropdownMenuItemProps[],
  ) {
    if (canvas) {
      event.e.preventDefault()

      switch (event.button) {
        case MOUSE_EVENTS.RIGHT_CLICK: {
          canvas.setActiveObject(selectedObject)
          canvas.renderAll()
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          const contextTop: CanvasRenderingContext2D = (canvas as any)
            .contextTop
          const pointer = fabric.util.getPointer(event.e, contextTop.canvas)
          const newEvent = new CustomEvent<KeadexContextMenuEvent>(
            GENERIC_EVENTS.CONTEXT_MENU,
            {
              detail: {
                sourceEvent: event,
                pageX: pointer.x,
                pageY: pointer.y,
                menuItems:
                  contextMenuItems ??
                  createBaseContextMenuItems(canvas, event, selectedObject),
              },
            },
          )
          document.dispatchEvent(newEvent)
          break
        }
        default:
          break
      }
    }
  }
}

export const createBaseContextMenuItems = (
  canvas: fabric.Canvas,
  event: IEvent<Event>,
  object: fabric.Object,
  asSubMenu = true,
): DropdownMenuItemProps[] => {
  const baseContextMenuItems = []
  const elementType = object.data?.rawDiagramElementSpec?.element_type
  const diagramLink = object.data?.rawData?.base_data?.link
  const isCanvasReadOnly = (canvas as KeadexCanvas).isReadOnly()
  const codingFeaturesEnabled = (canvas as KeadexCanvas).codingFeaturesEnabled
  const canOpenDiagramLink =
    elementType !== undefined &&
    diagramLink &&
    (boundaryDiagramElement(elementType) !== undefined ||
      componentDiagramElement(elementType) !== undefined ||
      containerDiagramElement(elementType) !== undefined ||
      deploymentNodeDiagramElement(elementType) !== undefined ||
      softwareSystemDiagramElement(elementType) !== undefined)
  const diagramElement =
    object instanceof VirtualGroupSelection ? object.parent : object
  const diagramElementData = diagramElement?.data

  let diagramElementLevel = 0
  let parent = diagramElement?.parent
  while (parent) {
    diagramElementLevel++
    parent = parent?.parent
  }

  if (canOpenDiagramLink) {
    baseContextMenuItems.push({
      isHeaderMenuItem: false,
      id: 'openDiagram',
      label: 'Open Diagram',
      onClick: () => {
        if (canvas.diagramListener) {
          canvas.diagramListener.onOpenDiagramClick(diagramLink)
        }
      },
    })
  }
  if (
    codingFeaturesEnabled &&
    diagramElementData?.rawData &&
    diagramElementData.rawDiagramElementSpec?.element_type
  ) {
    baseContextMenuItems.push({
      isHeaderMenuItem: false,
      id: 'selectDiagramElementCode',
      label: 'Select code',
      onClick: () => {
        if (canvas.diagramListener?.onSelectElementCode) {
          canvas.diagramListener.onSelectElementCode(
            diagramElementData.rawData,
            diagramElementData.rawDiagramElementSpec!.element_type,
            diagramElementLevel,
          )
        }
      },
    })
  }

  if (
    !isCanvasReadOnly &&
    (canOpenDiagramLink ||
      (codingFeaturesEnabled &&
        diagramElementData?.rawData &&
        diagramElementData.rawDiagramElementSpec?.element_type))
  ) {
    baseContextMenuItems.push({
      id: 'separatorCommon',
      isSepator: true,
    })
  }

  if (!isCanvasReadOnly) {
    baseContextMenuItems.push(
      {
        isHeaderMenuItem: false,
        id: 'bringToFront',
        label: 'Bring to Front',
        onClick: () => {
          object.bringToFront()
          object.canvas?.fire(CANVAS_EVENTS.OBJECT_MODIFIED)
        },
      },
      {
        isHeaderMenuItem: false,
        id: 'bringForward',
        label: 'Bring Forward',
        onClick: () => {
          object.bringForward()
          object.canvas?.fire(CANVAS_EVENTS.OBJECT_MODIFIED)
        },
      },
      {
        isHeaderMenuItem: false,
        id: 'sentToBack',
        label: 'Send to Back',
        onClick: () => sendToBack(object),
      },
      {
        isHeaderMenuItem: false,
        id: 'sendBackwards',
        label: 'Send Backwards',
        onClick: () => sendBackwards(object),
      },
    )
  }

  if (!asSubMenu) return baseContextMenuItems
  else
    return [
      {
        isHeaderMenuItem: true,
        id: 'baseComponentContextMenu',
        label: '',
        hidden: true,
        alwaysOpen: true,
        subMenuItems: baseContextMenuItems,
      },
    ]
}

const sendToBack = (object: fabric.Object) => {
  if (!object.parent) {
    // Is allowed to send to back an object only when it is not a child
    // of a virtual group, otherwise it will go behind of the parent and
    // it will not be possible to bring again it to front.
    object.sendToBack()
    object.canvas?.fire(CANVAS_EVENTS.OBJECT_MODIFIED)
  }
}

const sendBackwards = (object: fabric.Object) => {
  if (object instanceof VirtualGroupSelection) {
    // Case when selected a virtual group.
    // In this case, object.parent contains the object of the fabric.ActiveSelection
    // which represents the parent of the virtual group.
    const parentOfVirtualGroup = object.parent
    const minZIndexOfSelectedGroup = getMinZIndex(
      object.canvas,
      parentOfVirtualGroup?.children ?? [],
    )
    const minZIndexOfParentChildren = getMinZIndex(
      object.canvas,
      parentOfVirtualGroup?.parent?.children ?? [],
    )
    if (
      minZIndexOfParentChildren === undefined ||
      minZIndexOfSelectedGroup === undefined ||
      minZIndexOfSelectedGroup - 1 > minZIndexOfParentChildren
    ) {
      object.sendBackwards()
      object.canvas?.fire(CANVAS_EVENTS.OBJECT_MODIFIED)
    } else {
      console.debug(
        `cannot send backwards ${minZIndexOfSelectedGroup} ${minZIndexOfParentChildren}`,
      )
    }
  } else {
    // case when selected a fabric object
    const minZIndexOfObject = getZIndexOfObject(object.canvas, object)
    const minZIndexOfParentChildren = getMinZIndex(
      object.canvas,
      object.parent?.children ?? [],
    )
    if (
      minZIndexOfParentChildren === undefined ||
      minZIndexOfObject === undefined ||
      minZIndexOfObject - 1 > minZIndexOfParentChildren
    ) {
      object.sendBackwards()
      object.canvas?.fire(CANVAS_EVENTS.OBJECT_MODIFIED)
    } else {
      console.debug(
        `cannot send backwards ${minZIndexOfObject} ${minZIndexOfParentChildren}`,
      )
    }
  }
}
