import { fabric } from 'fabric'
import { DB, ELEMENT } from '../styles/style-constants'
import { DiagramElementSpec } from '../models/autogenerated/DiagramElementSpec'
import C4BaseBox from './C4BaseBox'
import { C4BaseBoxOptions } from './C4BaseBox'
import { C4BaseComponent } from './C4BaseComponent'
import { C4BaseComponentOptions, C4BaseComponentData } from './C4BaseComponent'

export const C4BaseDb = (
  data: C4BaseComponentData,
  elementSpec: DiagramElementSpec,
  options: C4BaseComponentOptions
): C4BaseComponent => {
  const objects: fabric.Object[] = []

  // ----- Base Box
  const baseBox = createBaseBox(data, options)
  objects.push(baseBox)

  const radiusTopBottomDb =
    (baseBox.width ?? 0) / 2 - ELEMENT.SIZES.BORDER_WIDTH / 2

  // ----- Top Db
  objects.push(createTopDb(baseBox, radiusTopBottomDb, options))

  // ----- Bottom Db
  objects.push(createBottomDb(baseBox, radiusTopBottomDb, options))

  const defaults: DiagramElementSpec = {
    alias: data.base_data?.alias,
    position: {
      left: ELEMENT.SIZES.DEFAULT_LEFT,
      top: ELEMENT.SIZES.DEFAULT_TOP,
    },
  }

  return new C4BaseComponent(data, elementSpec, defaults, objects)
}

const createBaseBox = (
  data: C4BaseComponentData,
  options: C4BaseBoxOptions
): fabric.Group => {
  const c4BaseBoxOptions: C4BaseBoxOptions = {
    ...options,
    borderRadius: 0,
  }
  return C4BaseBox(data, {}, c4BaseBoxOptions)
}

const createBottomDb = (
  baseBox: fabric.Group,
  radiusTopBottomDb: number,
  options: C4BaseBoxOptions
): fabric.Object => {
  return new fabric.Circle({
    fill: options.bgColor,
    stroke: options.borderColor,
    strokeWidth: ELEMENT.SIZES.BORDER_WIDTH,
    radius: radiusTopBottomDb,
    top:
      (baseBox.top ?? 0) +
      (baseBox.height ?? 0) -
      (radiusTopBottomDb * 2 * DB.SIZES.SCALE_X_TOP_BOTTOM) / 2 -
      ELEMENT.SIZES.BORDER_WIDTH,
    left: (baseBox.left ?? 0) + (baseBox.width ?? 0),
    angle: 90,
    startAngle: 270,
    endAngle: 90,
    scaleX: DB.SIZES.SCALE_X_TOP_BOTTOM,
  })
}

const createTopDb = (
  baseBox: fabric.Group,
  radiusTailHeadQueue: number,
  options: C4BaseBoxOptions
): fabric.Group => {
  const objects: fabric.Object[] = []

  const marginTopDb = ELEMENT.SIZES.BORDER_WIDTH

  // Empty box
  const heightEmptyBox = 14
  const emptyBox = new fabric.Rect({
    fill: options.bgColor,
    strokeWidth: 0,
    left: (baseBox.left ?? 0) + ELEMENT.SIZES.BORDER_WIDTH,
    top: (baseBox.top ?? 0) - heightEmptyBox + marginTopDb,
    width: (baseBox.width ?? 0) - ELEMENT.SIZES.BORDER_WIDTH * 2,
    height: heightEmptyBox,
  })
  objects.push(emptyBox)

  // Left line
  objects.push(
    new fabric.Line(
      [
        baseBox.left ?? 0,
        baseBox.top ?? 0,
        baseBox.left ?? 0,
        emptyBox.top ?? 0,
      ],
      {
        strokeWidth: ELEMENT.SIZES.BORDER_WIDTH,
        stroke: options.borderColor,
        originX: 'left',
        originY: 'top',
      }
    )
  )

  // right line
  objects.push(
    new fabric.Line(
      [
        (baseBox.left ?? 0) + (baseBox.width ?? 0) - ELEMENT.SIZES.BORDER_WIDTH,
        baseBox.top ?? 0,
        (baseBox.left ?? 0) + (baseBox.width ?? 0) - ELEMENT.SIZES.BORDER_WIDTH,
        emptyBox.top ?? 0,
      ],
      {
        strokeWidth: ELEMENT.SIZES.BORDER_WIDTH,
        stroke: options.borderColor,
        originX: 'left',
        originY: 'top',
      }
    )
  )

  // Ellipse
  objects.push(
    new fabric.Circle({
      fill: options.bgColor,
      stroke: options.borderColor,
      strokeWidth: ELEMENT.SIZES.BORDER_WIDTH,
      radius: radiusTailHeadQueue,
      top:
        (emptyBox.top ?? 0) -
        ((baseBox.width ?? 0) * DB.SIZES.SCALE_X_TOP_BOTTOM) / 2,
      left: (emptyBox.left ?? 0) + +(baseBox.width ?? 0) - marginTopDb,
      angle: 90,
      startAngle: 0,
      endAngle: 360,
      scaleX: DB.SIZES.SCALE_X_TOP_BOTTOM,
    })
  )

  return new fabric.Group(objects)
}

export default C4BaseDb
