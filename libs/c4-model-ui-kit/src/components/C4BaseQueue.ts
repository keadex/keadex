import { fabric } from 'fabric'
import { getAutoPosition } from '../helper/diagram-helper'
import { DiagramElementSpec } from '../models/autogenerated/DiagramElementSpec'
import { ElementData } from '../models/autogenerated/ElementData'
import { RenderElementsOptions } from '../rendering-system/diagram-renderer'
import { ELEMENT, QUEUE } from '../styles/style-constants'
import C4BaseBox, { C4BaseBoxOptions } from './C4BaseBox'
import {
  C4BaseComponent,
  C4BaseComponentData,
  C4BaseComponentOptions,
} from './C4BaseComponent'
import { getCustomTagsStyle, parseTags } from '../helper/tags-helper'
import { AddElementTag } from '../models/autogenerated/AddElementTag'

export const C4BaseQueue = (
  data: C4BaseComponentData,
  elementSpec: DiagramElementSpec,
  autoLayout: Record<string, ElementData>,
  options: C4BaseComponentOptions,
  renderElementsOptions: RenderElementsOptions | undefined,
): C4BaseComponent => {
  const customTagsStyle = getCustomTagsStyle(
    parseTags(data.base_data?.tags),
    renderElementsOptions?.tags,
  )
  const objects: fabric.Object[] = []

  // ----- Base Box
  const baseBox = createBaseBox(data, options, renderElementsOptions)
  objects.push(baseBox)

  const radiusTailHeadQueue =
    (baseBox.height ?? 0) / 2 - ELEMENT.SIZES.BORDER_WIDTH / 2

  // ----- Tail Queue
  objects.push(
    createTailQueue(baseBox, radiusTailHeadQueue, options, customTagsStyle),
  )

  // ----- Head Queue
  objects.push(
    createHeadQueue(baseBox, radiusTailHeadQueue, options, customTagsStyle),
  )

  const defaults: DiagramElementSpec = {
    alias: data.base_data?.alias,
    position: getAutoPosition(data.base_data?.alias, autoLayout),
  }

  return new C4BaseComponent(data, elementSpec, defaults, autoLayout, objects)
}

const createBaseBox = (
  data: C4BaseComponentData,
  options: C4BaseBoxOptions,
  renderElementsOptions: RenderElementsOptions | undefined,
): fabric.Group => {
  const c4BaseBoxOptions: C4BaseBoxOptions = {
    ...options,
    borderRadius: 0,
  }
  return C4BaseBox(data, {}, {}, c4BaseBoxOptions, renderElementsOptions)
}

const createTailQueue = (
  baseBox: fabric.Group,
  radiusTailHeadQueue: number,
  options: C4BaseBoxOptions,
  customTagsStyle: AddElementTag | undefined,
): fabric.Object => {
  return new fabric.Circle({
    fill: customTagsStyle?.bg_color ?? options.bgColor,
    stroke: customTagsStyle?.border_color ?? options.borderColor,
    strokeWidth: ELEMENT.SIZES.BORDER_WIDTH,
    radius: radiusTailHeadQueue,
    top: baseBox.top,
    left:
      (baseBox.left ?? 0) +
      (radiusTailHeadQueue * 2 * QUEUE.SIZES.SCALE_Y_TAIL_HEAD) / 2 +
      ELEMENT.SIZES.BORDER_WIDTH * 2,
    angle: 90,
    startAngle: 0,
    endAngle: 180,
    scaleY: QUEUE.SIZES.SCALE_Y_TAIL_HEAD,
  })
}

const createHeadQueue = (
  baseBox: fabric.Group,
  radiusTailHeadQueue: number,
  options: C4BaseBoxOptions,
  customTagsStyle: AddElementTag | undefined,
): fabric.Group => {
  const objects: fabric.Object[] = []

  const marginHeadQueue = ELEMENT.SIZES.BORDER_WIDTH

  // Empty box
  const emptyBox = new fabric.Rect({
    fill: customTagsStyle?.bg_color ?? options.bgColor,
    strokeWidth: 0,
    left: (baseBox.left ?? 0) + (baseBox.width ?? 0) - marginHeadQueue,
    top: (baseBox.top ?? 0) + ELEMENT.SIZES.BORDER_WIDTH,
    width: QUEUE.SIZES.HEAD_BOX_WIDTH,
    height: (baseBox.height ?? 0) - ELEMENT.SIZES.BORDER_WIDTH * 2,
  })
  objects.push(emptyBox)

  // Top line
  objects.push(
    new fabric.Line(
      [
        emptyBox.left ?? 0,
        baseBox.top ?? 0,
        (emptyBox.left ?? 0) + (emptyBox.width ?? 0),
        baseBox.top ?? 0,
      ],
      {
        strokeWidth: ELEMENT.SIZES.BORDER_WIDTH,
        stroke: customTagsStyle?.border_color ?? options.borderColor,
        originX: 'left',
        originY: 'top',
      },
    ),
  )

  // Bottom line
  objects.push(
    new fabric.Line(
      [
        emptyBox.left ?? 0,
        (emptyBox.top ?? 0) + (emptyBox.height ?? 0),
        (emptyBox.left ?? 0) + (emptyBox.width ?? 0),
        (emptyBox.top ?? 0) + (emptyBox.height ?? 0),
      ],
      {
        strokeWidth: ELEMENT.SIZES.BORDER_WIDTH,
        stroke: customTagsStyle?.border_color ?? options.borderColor,
        originX: 'left',
        originY: 'top',
      },
    ),
  )

  // Ellipse
  objects.push(
    new fabric.Circle({
      fill: customTagsStyle?.bg_color ?? options.bgColor,
      stroke: customTagsStyle?.border_color ?? options.borderColor,
      strokeWidth: ELEMENT.SIZES.BORDER_WIDTH,
      radius: radiusTailHeadQueue,
      top: baseBox.top,
      left:
        (emptyBox.left ?? 0) +
        (emptyBox.width ?? 0) +
        ((baseBox.height ?? 0) * QUEUE.SIZES.SCALE_Y_TAIL_HEAD) / 2 -
        marginHeadQueue,
      angle: 90,
      startAngle: 0,
      endAngle: 360,
      scaleY: QUEUE.SIZES.SCALE_Y_TAIL_HEAD,
    }),
  )

  return new fabric.Group(objects)
}

export default C4BaseQueue
