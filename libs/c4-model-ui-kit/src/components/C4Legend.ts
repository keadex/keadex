import { fabric } from 'fabric'
import { DiagramElementSpec } from '../models/autogenerated/DiagramElementSpec'
import { RenderElementsOptions } from '../rendering-system/diagram-renderer'
import { BOX, ELEMENT, LEGEND } from '../styles/style-constants'
import { C4BaseComponent } from './C4BaseComponent'

export const ALIAS = 'legend'

export const C4Legend = (
  elementSpec: DiagramElementSpec | undefined,
  renderElementsOptions: RenderElementsOptions | undefined,
): C4BaseComponent => {
  let objects: fabric.Object[] = []

  const title = createTitle()
  objects.push(title)

  objects = objects.concat(
    createItem(
      'Person',
      renderElementsOptions?.diagramsThemeSettings?.bg_color_person ??
        BOX.COLORS.BG_COLOR_SOFTWARE_SYSTEM_PERSON,
      renderElementsOptions?.diagramsThemeSettings?.text_color_person ??
        BOX.COLORS.TEXT_COLOR_SOFTWARE_SYSTEM_PERSON,
      1,
    ),
  )
  objects = objects.concat(
    createItem(
      'Person External',
      renderElementsOptions?.diagramsThemeSettings?.bg_color_person_ext ??
        BOX.COLORS.BG_COLOR_SOFTWARE_SYSTEM_PERSON_EXT,
      renderElementsOptions?.diagramsThemeSettings?.text_color_person_ext ??
        BOX.COLORS.TEXT_COLOR_SOFTWARE_SYSTEM_PERSON_EXT,
      2,
    ),
  )

  objects = objects.concat(
    createItem(
      'System',
      renderElementsOptions?.diagramsThemeSettings?.bg_color_software_system ??
        BOX.COLORS.BG_COLOR_SOFTWARE_SYSTEM_PERSON,
      renderElementsOptions?.diagramsThemeSettings
        ?.text_color_software_system ??
        BOX.COLORS.TEXT_COLOR_SOFTWARE_SYSTEM_PERSON,
      3,
    ),
  )

  objects = objects.concat(
    createItem(
      'System External',
      renderElementsOptions?.diagramsThemeSettings
        ?.bg_color_software_system_ext ??
        BOX.COLORS.BG_COLOR_SOFTWARE_SYSTEM_PERSON_EXT,
      renderElementsOptions?.diagramsThemeSettings
        ?.text_color_software_system_ext ??
        BOX.COLORS.TEXT_COLOR_SOFTWARE_SYSTEM_PERSON_EXT,
      4,
    ),
  )

  objects = objects.concat(
    createItem(
      'Container',
      renderElementsOptions?.diagramsThemeSettings?.bg_color_container ??
        BOX.COLORS.BG_COLOR_CONTAINER,
      renderElementsOptions?.diagramsThemeSettings?.text_color_container ??
        BOX.COLORS.TEXT_COLOR_CONTAINER,
      5,
    ),
  )

  objects = objects.concat(
    createItem(
      'Container External',
      renderElementsOptions?.diagramsThemeSettings?.bg_color_container_ext ??
        BOX.COLORS.BG_COLOR_CONTAINER_EXT,
      renderElementsOptions?.diagramsThemeSettings?.text_color_container_ext ??
        BOX.COLORS.TEXT_COLOR_CONTAINER_EXT,
      6,
    ),
  )

  objects = objects.concat(
    createItem(
      'Component',
      renderElementsOptions?.diagramsThemeSettings?.bg_color_component ??
        BOX.COLORS.BG_COLOR_COMPONENT,
      renderElementsOptions?.diagramsThemeSettings?.text_color_component ??
        BOX.COLORS.TEXT_COLOR_COMPONENT,
      7,
    ),
  )

  objects = objects.concat(
    createItem(
      'Component External',
      renderElementsOptions?.diagramsThemeSettings?.bg_color_component_ext ??
        BOX.COLORS.BG_COLOR_COMPONENT_EXT,
      renderElementsOptions?.diagramsThemeSettings?.text_color_component_ext ??
        BOX.COLORS.TEXT_COLOR_COMPONENT_EXT,
      8,
    ),
  )

  let lastPosition = 8
  if (renderElementsOptions?.diagramsThemeSettings?.bg_color_boundary) {
    lastPosition++
    objects = objects.concat(
      createItem(
        'Boundary',
        renderElementsOptions.diagramsThemeSettings.bg_color_boundary,
        renderElementsOptions?.diagramsThemeSettings?.text_color_boundary ??
          BOX.COLORS.TEXT_COLOR_BOUNDARY,
        lastPosition,
      ),
    )
  }

  if (renderElementsOptions?.diagramsThemeSettings?.bg_color_deployment_node) {
    lastPosition++
    objects = objects.concat(
      createItem(
        'Deployment Node',
        renderElementsOptions.diagramsThemeSettings.bg_color_deployment_node,
        renderElementsOptions?.diagramsThemeSettings
          ?.text_color_deployment_node ?? BOX.COLORS.TEXT_COLOR_DEPLOYMENT_NODE,
        lastPosition,
      ),
    )
  }

  const defaults: DiagramElementSpec = {
    alias: ALIAS,
    position: {
      left: LEGEND.SIZES.LEFT,
      top: LEGEND.SIZES.TOP,
    },
  }

  return new C4BaseComponent(undefined, elementSpec, defaults, {}, objects)
}

const createTitle = (): fabric.Object => {
  return new fabric.Text('LEGEND', {
    fill: LEGEND.COLOR.TEXT_COLOR_TITLE,
    fontFamily: ELEMENT.FONT.FAMILY,
    fontSize: LEGEND.FONT.SIZE_TITLE,
    fontWeight: 'bold',
    textAlign: 'left',
    originX: 'left',
    originY: 'top',
    left: LEGEND.SIZES.LEFT,
    top: LEGEND.SIZES.TOP,
  })
}

const createItem = (
  name: string,
  bgColor: string,
  textColor: string,
  position: number,
): fabric.Object[] => {
  const objects: fabric.Object[] = []

  const box = new fabric.Rect({
    fill: bgColor,
    left: LEGEND.SIZES.LEFT,
    top: LEGEND.SIZES.TOP + LEGEND.SIZES.HEIGHT * position,
    width: LEGEND.SIZES.WIDTH,
    height: LEGEND.SIZES.HEIGHT,
  })
  objects.push(box)

  const text = new fabric.Text(name, {
    fill: textColor,
    fontFamily: ELEMENT.FONT.FAMILY,
    fontSize: LEGEND.FONT.SIZE_ITEM,
    fontWeight: 'normal',
    textAlign: 'left',
    originX: 'left',
    originY: 'top',
    left: LEGEND.SIZES.LEFT + LEGEND.SIZES.PADDING_LEFT,
  })
  text.top = (box.top ?? 0) + (box.height ?? 0) / 2 - (text.height ?? 0) / 2
  objects.push(text)
  return objects
}

export default C4Legend
