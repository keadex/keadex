import { Point } from '../models/autogenerated/Point'
import { GraphvizObject } from '../models/graphviz/GraphvizObject'
import { inchToPx, ptToPx } from '@keadex/keadex-utils'
import {
  DEFAULT_GRAPHVIZ_SUBGRAPH_PAD,
  GRAPHVIZ_DPI,
  X_PAD,
  Y_PAD,
} from '../rendering-system/auto-layout/dot-serializer'

const SUBGRAPH_MARGIN_HACK_ID_SUFFIX = '_margin_hack'

export function graphvizCoordinatesToPx(
  padInInch: Point,
  graphHeightInPt: number,
  point: number[],
): number[] {
  if (point.length === 2) {
    // https://graphviz.org/faq/#FaqCoordTransformation
    // https://forum.graphviz.org/t/getting-coordinates-of-nodes-from-dot/707/4
    return point.map((point, index) => {
      const pad = index === 0 ? inchToPx(padInInch.x) : inchToPx(padInInch.y)
      const transformedPoint = index === 0 ? point : graphHeightInPt - point
      return ptToPx(transformedPoint, GRAPHVIZ_DPI) + pad
    })
  }
  return point
}

/**
 * Check if the given GraphvizObject represents a C4 Elastic Container.
 * @param object Graphviz object
 * @returns
 */
export function isC4ElasticContainer(object: GraphvizObject): boolean {
  // As per dot serializer logic (rendering-system/auto-layout/dot-serializer.ts),
  // a C4 Elastic Container is serialized as a subgraph containing
  // another subgraph (the hack one)
  return object.subgraphs !== undefined && object.subgraphs.length > 0
}

export function generateSubgraphMarginHackId(id: string) {
  return `${id}${SUBGRAPH_MARGIN_HACK_ID_SUFFIX}`
}

export function isSubgraphMarginHack(object: GraphvizObject) {
  return object.name.endsWith(SUBGRAPH_MARGIN_HACK_ID_SUFFIX)
}

export function isSubgraphInvisibleNodeHack(object: GraphvizObject) {
  return (
    object.width &&
    Number.parseInt(object.width) === 0 &&
    object.height &&
    Number.parseInt(object.height) === 0 &&
    object.peripheries &&
    Number.parseInt(object.peripheries) === 0 &&
    object.label === ''
  )
}

export function getPadInInch(containsSubgraphs: boolean): Point {
  let xPad = X_PAD
  let yPad = Y_PAD
  if (containsSubgraphs) {
    xPad -= DEFAULT_GRAPHVIZ_SUBGRAPH_PAD
    yPad -= DEFAULT_GRAPHVIZ_SUBGRAPH_PAD
  }
  return {
    x: Number.parseFloat(xPad.toFixed(2)),
    y: Number.parseFloat(yPad.toFixed(2)),
  }
}

export function getGraphHeightInPtFromBB(bb: string): number {
  // Example bb: "0,0,500,400"
  const bbComponents = bb.split(',')
  const height = Number.parseFloat(bbComponents[3]) //Height is in pt
  return height
}

export function svgPathFromGraphvizPos(
  graphvizPos: string,
  start: Point,
  end: Point,
  padInInch: Point,
  graphHeightInPt: number,
): string {
  // Graphviz pos example: "M 431.15 239.49 C 431.15 228.51, 431.15 217.09, 431.15 252.81"
  const points = graphvizPos
    .split(' ')
    .slice(1)
    .map((p) => p.split(',').map(Number))

  let pathData = `M ${end.x} ${end.y}`

  for (let i = points.length - 3; i >= 0; i -= 3) {
    const [c1X, c1Y] = graphvizCoordinatesToPx(
      padInInch,
      graphHeightInPt,
      points[i + 1],
    )
    const [c2X, c2Y] = graphvizCoordinatesToPx(
      padInInch,
      graphHeightInPt,
      points[i],
    )
    const [endX, endY] = graphvizCoordinatesToPx(
      padInInch,
      graphHeightInPt,
      points[i - 1],
    )

    let newEndX = endX,
      newEndY = endY
    if (i === 1) {
      newEndX = start.x
      newEndY = start.y
    }
    pathData += ` C ${c1X} ${c1Y}, ${c2X} ${c2Y}, ${newEndX} ${newEndY}`
  }
  return pathData
}
