export const DIAGRAM = {
  COLOR: {
    BG_COLOR: '#FFFFFF',
  },
}

export const LEGEND = {
  COLOR: {
    TEXT_COLOR_TITLE: '#000000',
  },
  FONT: {
    SIZE_TITLE: 12,
    SIZE_ITEM: 10,
  },
  SIZES: {
    TOP: 20,
    LEFT: 20,
    WIDTH: 120,
    HEIGHT: 20,
    PADDING_LEFT: 10,
  },
}

export const ELEMENT = {
  SIZES: {
    DEFAULT_TOP: LEGEND.SIZES.TOP + LEGEND.SIZES.HEIGHT,
    DEFAULT_LEFT: LEGEND.SIZES.LEFT + LEGEND.SIZES.WIDTH + 50,
    BORDER_WIDTH: 1,
  },
  FONT: {
    FAMILY: 'Roboto',
  },
}

export const BOX = {
  COLORS: {
    BG_COLOR_SOFTWARE_SYSTEM_PERSON: '#1168BD',
    BG_COLOR_CONTAINER: '#438DD5',
    BG_COLOR_COMPONENT: '#85BBF0',
    BG_COLOR_SOFTWARE_SYSTEM_PERSON_EXT: '#686868',
    BG_COLOR_CONTAINER_EXT: '#999999',
    BG_COLOR_COMPONENT_EXT: '#CCCCCC',
    BG_COLOR_BOUNDARY: DIAGRAM.COLOR.BG_COLOR,
    BG_COLOR_DEPLOYMENT_NODE: DIAGRAM.COLOR.BG_COLOR,

    BORDER_COLOR_SOFTWARE_SYSTEM_PERSON: '#0F5BA6',
    BORDER_COLOR_CONTAINER: '#3E84C7',
    BORDER_COLOR_COMPONENT: '#7BADDE',
    BORDER_COLOR_SOFTWARE_SYSTEM_PERSON_EXT: '#525252',
    BORDER_COLOR_CONTAINER_EXT: '#8A8A8A',
    BORDER_COLOR_COMPONENT_EXT: '#BDBDBD',
    BORDER_COLOR_BOUNDARY: '#666666',
    BORDER_COLOR_DEPLOYMENT_NODE: '#666666',

    TEXT_COLOR_SOFTWARE_SYSTEM_PERSON: '#FFFFFF',
    TEXT_COLOR_CONTAINER: '#FFFFFF',
    TEXT_COLOR_COMPONENT: '#000000',
    TEXT_COLOR_SOFTWARE_SYSTEM_PERSON_EXT: '#FFFFFF',
    TEXT_COLOR_CONTAINER_EXT: '#FFFFFF',
    TEXT_COLOR_COMPONENT_EXT: '#000000',
    TEXT_COLOR_BOUNDARY: '#333333',
    TEXT_COLOR_DEPLOYMENT_NODE: '#333333',
  },
  SIZES: {
    WIDTH: 220,
    MIN_HEIGHT: 100,
    PADDING_BOTTOM: 15,
    BORDER_RADIUS: 10,
    TOP_LABEL: 20,
    TOP_TAGS: 5,
    TOP_TYPE_TECHNOLOGY: 2,
    TOP_DESCRIPTION: 25,
    PADDING_Y_DESCRIPTION: 10,
  },
  FONT: {
    SIZE: 14,
    SIZE_TAG: 12,
    SIZE_TYPE_TECHNOLOGY: 12,
    SIZE_DESCRIPTION: 10,
  },
}

export const QUEUE = {
  SIZES: {
    SCALE_Y_TAIL_HEAD: 0.3,
    HEAD_BOX_WIDTH: 20,
    RADIUS_TAIL_HEAD: BOX.SIZES.MIN_HEIGHT / 2 - ELEMENT.SIZES.BORDER_WIDTH / 2,
    SCALED_RADIUS_TAIL_HEAD: Infinity,
    WIDTH_TAIL: Infinity,
    WIDTH_HEAD: Infinity,
  },
}
QUEUE.SIZES.SCALED_RADIUS_TAIL_HEAD =
  QUEUE.SIZES.RADIUS_TAIL_HEAD * QUEUE.SIZES.SCALE_Y_TAIL_HEAD
QUEUE.SIZES.WIDTH_TAIL = QUEUE.SIZES.SCALED_RADIUS_TAIL_HEAD
QUEUE.SIZES.WIDTH_HEAD =
  QUEUE.SIZES.HEAD_BOX_WIDTH + QUEUE.SIZES.SCALED_RADIUS_TAIL_HEAD

export const DB = {
  SIZES: {
    SCALE_X_TOP_BOTTOM: 0.15,
    TOP_BOX_HEIGHT: 14,
    RADIUS_TOP_BOTTOM: BOX.SIZES.WIDTH / 2 - ELEMENT.SIZES.BORDER_WIDTH / 2,
    SCALED_RADIUS_TOP_BOTTOM: Infinity,
    WIDTH_TOP: Infinity,
    WIDTH_BOTTOM: Infinity,
  },
}
DB.SIZES.SCALED_RADIUS_TOP_BOTTOM =
  DB.SIZES.RADIUS_TOP_BOTTOM * DB.SIZES.SCALE_X_TOP_BOTTOM
DB.SIZES.WIDTH_TOP = DB.SIZES.TOP_BOX_HEIGHT + DB.SIZES.SCALED_RADIUS_TOP_BOTTOM
DB.SIZES.WIDTH_BOTTOM = DB.SIZES.SCALED_RADIUS_TOP_BOTTOM

export const RELATIONSHIP = {
  COLORS: {
    BG_COLOR: 'rgba(0,0,0,0)',
    LINE_COLOR: '#828282',
    TEXT_COLOR: '#404040',
    SELECTED_COLOR: '#ff8f26',
  },
  FONT: {
    SIZE_LABEL: 10,
    SIZE_TECHNOLOGY: 10,
  },
  SIZES: {
    PADDING_BACKGROUND: 3,
    RADIUS_DOT: 3,
    SIZE_TRIANGLE: 9,
    STROKE_WIDTH: 1,
    STROKE_SELECTED_INCREMENT_WIDTH: 2,
    DEFAULT_WIDTH: 100,
  },
  POSITION: {
    DEFAULT_HEAD_ARROW_ANGLE: 90,
  },
}

export const PERSON = {
  SIZES: {
    BORDER_RADIUS: 40,
    HEAD_RADIUS: 45,
  },
}

export const BASE_ELASTIC_CONTAINER = {
  FONT: {
    SIZE_LABEL: 10,
    SIZE_TYPE_TECHNOLOGY: 10,
  },
  SIZES: {
    MIN_WIDTH: 150,
    MIN_HEIGHT: 80,
    PADDING_BOX: 10,
    // The footer height is based on the font size, line height and font height. The font height
    // is calculated by Fabric.js so it is not possible to recalculate it here. The only option for now
    // is to hardcode the following size, which is taken directly from Fabric.js.
    // This is not the best solution but for now "it just works".
    FOOTER_HEIGHT: 23.6,
  },
}

export const BOUNDARY = {
  SIZES: {
    STROKE_DASH_ARRAY: [5, 5],
  },
}

export const SUPPORTED_BORDER_STYLES: Record<
  string,
  { name: string; value: number[] }
> = {
  '"dashed"': {
    name: '"dashed"',
    value: [8, 5],
  },
}
