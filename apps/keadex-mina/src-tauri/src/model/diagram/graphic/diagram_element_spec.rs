/*!
Model representing an entity drawn in a diagram.
*/

use crate::model::c4_element::ElementType;
use crate::model::diagram::graphic::position::Position;
use crate::model::diagram::graphic::shape::Shape;
use crate::model::diagram::graphic::size::Size;
use serde::{Deserialize, Serialize};
use ts_rs::TS;
use wasm_bindgen::prelude::wasm_bindgen;

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../libs/c4-model-ui-kit/src/models/autogenerated/"
)]
#[derive(Serialize, Deserialize, Debug, Clone)]
#[wasm_bindgen(getter_with_clone)]
pub struct DiagramElementSpec {
  // "alias" is needed as a key for the related element in the puml file
  #[serde(skip_serializing_if = "Option::is_none")]
  pub alias: Option<String>,

  // "from" and "to" are needed (only in case of relationships) as
  // as a composite key for the related relationship in the puml file
  #[serde(skip_serializing_if = "Option::is_none")]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub to: Option<String>,

  #[serde(skip_serializing_if = "Option::is_none")]
  pub shapes: Option<Vec<Shape>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub element_type: Option<ElementType>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub position: Option<Position>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub size: Option<Size>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub inner_specs: Option<Vec<DiagramElementSpec>>,
}
