/*!
Model representing specifications of a C4 diagram.
*/

use crate::model::diagram::graphic::diagram_element_spec::DiagramElementSpec;
use crate::model::diagram::graphic::shape::Shape;
use crate::model::diagram::Wasm;
use layout::core::base::Orientation as LayoutOrientation;
use serde::{Deserialize, Serialize};
use strum::Display;
use strum::EnumString;
use ts_rs::TS;
use uuid::Uuid;
use wasm_bindgen::prelude::wasm_bindgen;

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../libs/c4-model-ui-kit/src/models/autogenerated/"
)]
#[derive(Serialize, Deserialize, Display, Debug, EnumString, Clone, Wasm)]
#[wasm(wasm_abi)]
pub enum DiagramOrientation {
  #[serde(rename = "TopToBottom")]
  #[strum(serialize = "TopToBottom")]
  TopToBottom,
  #[serde(rename = "LeftToRight")]
  #[strum(serialize = "LeftToRight")]
  LeftToRight,
}

impl DiagramOrientation {
  fn top_to_bottom() -> Self {
    DiagramOrientation::TopToBottom
  }
  pub fn to_layout_orientation(orientation: &DiagramOrientation) -> LayoutOrientation {
    match orientation {
      DiagramOrientation::TopToBottom => return LayoutOrientation::TopToBottom,
      DiagramOrientation::LeftToRight => return LayoutOrientation::LeftToRight,
    }
  }
}

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../libs/c4-model-ui-kit/src/models/autogenerated/"
)]
#[derive(Serialize, Deserialize, Debug, Clone)]
#[wasm_bindgen(getter_with_clone)]
pub struct DiagramSpec {
  pub uuid: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub tags: Option<Vec<String>>,
  pub elements_specs: Vec<DiagramElementSpec>,
  pub shapes: Vec<Shape>,
  #[serde(default)]
  pub auto_layout_enabled: bool,
  #[serde(default = "DiagramOrientation::top_to_bottom")]
  pub auto_layout_orientation: DiagramOrientation,
  #[serde(default)]
  pub auto_layout_only_straight_arrows: bool,
  #[serde(default)]
  pub grid_enabled: bool,
}

impl Default for DiagramSpec {
  fn default() -> Self {
    DiagramSpec {
      uuid: Uuid::new_v4().to_string(),
      description: None,
      tags: None,
      elements_specs: vec![],
      shapes: vec![],
      auto_layout_enabled: true,
      auto_layout_orientation: DiagramOrientation::TopToBottom,
      auto_layout_only_straight_arrows: false,
      grid_enabled: false,
    }
  }
}
