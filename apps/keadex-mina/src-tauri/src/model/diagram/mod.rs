pub mod diagram_aggregated_details;
pub mod diagram_plantuml;
pub mod diagram_spec;
pub mod graphic;

use crate::model::diagram::{diagram_plantuml::DiagramPlantUML, diagram_spec::DiagramSpec};
use crate::model::graph::element_data::ElementData;
use bomboni_wasm::Wasm;
use serde::{Deserialize, Serialize};
use serde_wasm_bindgen::{from_value, Serializer};
use std::collections::HashMap;
use strum::{Display, EnumIter, EnumString};
use ts_rs::TS;
use wasm_bindgen::prelude::{wasm_bindgen, JsValue};

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../libs/c4-model-ui-kit/src/models/autogenerated/"
)]
#[derive(
  Serialize, Deserialize, Display, Debug, EnumString, Clone, EnumIter, Hash, Eq, PartialEq, Wasm,
)]
#[wasm(wasm_abi)]
pub enum C4ElementType {
  #[serde(rename = "Person")]
  #[strum(serialize = "Person")]
  Person,
  #[serde(rename = "SoftwareSystem")]
  #[strum(serialize = "SoftwareSystem")]
  SoftwareSystem,
  #[serde(rename = "Container")]
  #[strum(serialize = "Container")]
  Container,
  #[serde(rename = "Component")]
  #[strum(serialize = "Component")]
  Component,
}

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../libs/c4-model-ui-kit/src/models/autogenerated/"
)]
#[derive(
  Serialize, Deserialize, Display, Debug, EnumString, Clone, EnumIter, Hash, Eq, PartialEq,
)]
pub enum C4ElementTypeExtended {
  #[serde(rename = "Boundary")]
  #[strum(serialize = "Boundary")]
  Boundary,
  #[serde(rename = "DeploymentNode")]
  #[strum(serialize = "DeploymentNode")]
  DeploymentNode,
  #[serde(rename = "AddElementTag")]
  #[strum(serialize = "AddElementTag")]
  AddElementTag,
  #[serde(rename = "Relationship")]
  #[strum(serialize = "Relationship")]
  Relationship,
}

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../libs/c4-model-ui-kit/src/models/autogenerated/"
)]
#[derive(
  Serialize, Deserialize, Display, Debug, EnumString, Clone, EnumIter, Hash, Eq, PartialEq, Wasm,
)]
#[wasm(wasm_abi)]
pub enum DiagramType {
  #[serde(rename = "SYSTEM_CONTEXT")]
  #[strum(serialize = "SYSTEM_CONTEXT")]
  SystemContext,
  #[serde(rename = "CONTAINER")]
  #[strum(serialize = "CONTAINER")]
  Container,
  #[serde(rename = "COMPONENT")]
  #[strum(serialize = "COMPONENT")]
  Component,
  #[serde(rename = "SYSTEM_LANDSCAPE")]
  #[strum(serialize = "SYSTEM_LANDSCAPE")]
  SystemLadscape,
  #[serde(rename = "DYNAMIC")]
  #[strum(serialize = "DYNAMIC")]
  Dynamic,
  #[serde(rename = "DEPLOYMENT")]
  #[strum(serialize = "DEPLOYMENT")]
  Deployment,
}

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../libs/c4-model-ui-kit/src/models/autogenerated/"
)]
#[derive(Default, Serialize, Deserialize, Debug, Clone)]
#[wasm_bindgen(getter_with_clone)]
pub struct Diagram {
  #[serde(skip_serializing_if = "Option::is_none")]
  pub diagram_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub diagram_type: Option<DiagramType>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub diagram_spec: Option<DiagramSpec>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub diagram_plantuml: Option<DiagramPlantUML>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub raw_plantuml: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub last_modified: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[wasm_bindgen(skip)]
  pub auto_layout: Option<HashMap<String, ElementData>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub auto_layout_errors: Option<Vec<String>>,
}

#[wasm_bindgen]
impl Diagram {
  #[wasm_bindgen(getter)]
  pub fn auto_layout(&self) -> JsValue {
    // Using a custom serializer to serialize the Rust map
    // into a plain JavaScript object instead of ES2015 map.
    let serializer = Serializer::new().serialize_maps_as_objects(true);
    self.auto_layout.serialize(&serializer).unwrap()
    // to_value(&self.auto_layout).unwrap()
  }

  #[wasm_bindgen(setter)]
  pub fn set_auto_layout(&mut self, auto_layout: JsValue) {
    self.auto_layout = from_value(auto_layout).unwrap();
  }
}

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../apps/keadex-mina/src/models/autogenerated/"
)]
#[derive(Serialize, Deserialize, Display, Debug, EnumString, Clone, EnumIter, Wasm)]
#[wasm(wasm_abi)]
pub enum DiagramFormat {
  #[serde(rename = "png")]
  #[strum(serialize = "png")]
  Png,
  #[serde(rename = "jpeg")]
  #[strum(serialize = "jpeg")]
  Jpeg,
}
