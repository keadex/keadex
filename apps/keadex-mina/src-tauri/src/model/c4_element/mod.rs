pub mod base_element;
pub mod boundary;
pub mod component;
pub mod container;
pub mod deployment_node;
pub mod person;
pub mod relationship;
pub mod software_system;

use crate::model::c4_element::boundary::{Boundary, BoundaryType};
use crate::model::c4_element::component::{Component, ComponentType};
use crate::model::c4_element::container::{Container, ContainerType};
use crate::model::c4_element::deployment_node::{DeploymentNode, DeploymentNodeType};
use crate::model::c4_element::person::{Person, PersonType};
use crate::model::c4_element::relationship::{Relationship, RelationshipType};
use crate::model::c4_element::software_system::{SoftwareSystem, SystemType};
use serde::{Deserialize, Serialize};
use strum_macros::Display;
use ts_rs::TS;

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../libs/c4-model-ui-kit/src/models/autogenerated/"
)]
#[derive(Serialize, Deserialize, Display, Debug, Clone)]
pub enum ElementType {
  Boundary(BoundaryType),
  Component(ComponentType),
  Container(ContainerType),
  DeploymentNode(DeploymentNodeType),
  Person(PersonType),
  Relationship(RelationshipType),
  SoftwareSystem(SystemType),
}

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../apps/keadex-mina/src/models/autogenerated/"
)]
#[derive(Serialize, Deserialize, Debug, Default, Clone)]
pub struct C4Elements {
  pub persons: Vec<Person>,
  pub software_systems: Vec<SoftwareSystem>,
  pub containers: Vec<Container>,
  pub components: Vec<Component>,
  pub deployment_nodes: Vec<DeploymentNode>,
  pub relationships: Vec<Relationship>,
  pub boundaries: Vec<Boundary>,
}
