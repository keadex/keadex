/*!
Model representing the response of the AI for generating diagrams.
*/

use serde::{Deserialize, Serialize};
use strum::{Display, EnumIter, EnumString};
use ts_rs::TS;

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../apps/keadex-mina/src/models/autogenerated/"
)]
#[derive(
  Serialize, Deserialize, Display, Debug, EnumString, Clone, EnumIter, Hash, Eq, PartialEq,
)]
pub enum AIDiagramGenElementType {
  #[serde(rename = "Person")]
  #[strum(serialize = "Person")]
  Person,
  #[serde(rename = "SoftwareSystem")]
  #[strum(serialize = "SoftwareSystem")]
  SoftwareSystem,
  #[serde(rename = "Container")]
  #[strum(serialize = "Container")]
  Container,
  #[serde(rename = "Component")]
  #[strum(serialize = "Component")]
  Component,
  #[serde(rename = "Relationship")]
  #[strum(serialize = "Relationship")]
  Relationship,
}

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../apps/keadex-mina/src/models/autogenerated/"
)]
#[derive(Default, Serialize, Deserialize, Debug, Clone)]
pub struct AIDiagramGenElement {
  #[serde(skip_serializing_if = "Option::is_none")]
  pub alias: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub label: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub technology: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub element_type: Option<AIDiagramGenElementType>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub from_alias: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  pub to_alias: Option<String>,
}

#[derive(TS)]
#[ts(
  export,
  export_to = "../../../apps/keadex-mina/src/models/autogenerated/"
)]
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AIDiagramGenResponse {
  pub diagram_elements: Vec<AIDiagramGenElement>,
}

impl Default for AIDiagramGenResponse {
  fn default() -> Self {
    AIDiagramGenResponse {
      diagram_elements: vec![],
    }
  }
}
