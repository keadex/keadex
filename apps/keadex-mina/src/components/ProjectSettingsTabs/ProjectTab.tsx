import { faFolder } from '@fortawesome/free-solid-svg-icons'
import { IconButton, Input, Textarea } from '@keadex/keadex-ui-kit/cross'
import React, { Dispatch, SetStateAction } from 'react'
import { useTranslation } from 'react-i18next'
import { NAME_REGEX, VERSION_REGEX } from '../../constants/regex'
import { ProjectSettings } from '../../models/autogenerated/ProjectSettings'

export type ProjectTabProps = {
  mode: 'edit' | 'create'
  setNewProjectSettings: Dispatch<SetStateAction<ProjectSettings | undefined>>
  chooseProjectDirectory: () => void
  root: string
  name: string
  version: string
  description: string
}

export const ProjectTab = React.memo((props: ProjectTabProps) => {
  const { t } = useTranslation()
  const {
    mode,
    setNewProjectSettings,
    chooseProjectDirectory,
    root,
    name,
    version,
    description,
  } = props

  return (
    <div>
      {mode === 'create' && (
        <IconButton
          icon={faFolder}
          onClick={chooseProjectDirectory}
          className="flex mt-6"
          classNameIcon="mt-[3px]"
          classNameContent="ml-3"
        >
          {root.replace(/ /g, '').length > 0
            ? root
            : t('home.chose_parent_dir_project')}
        </IconButton>
      )}

      <Input
        type="text"
        label={`${t('common.name')}*`}
        className="mt-6"
        allowedChars={NAME_REGEX}
        info={`${t('common.allowed_pattern')}: ${NAME_REGEX}`}
        value={name}
        onChange={(e) =>
          setNewProjectSettings((prev) => {
            if (prev) {
              return {
                ...prev,
                name: e.target.value,
              }
            }
          })
        }
      />
      <Input
        type="text"
        label={`${t('common.version')}*`}
        className="mt-6"
        allowedChars={VERSION_REGEX}
        info={`${t('common.allowed_pattern')}: ${VERSION_REGEX}`}
        value={version}
        onChange={(e) =>
          setNewProjectSettings((prev) => {
            if (prev) {
              return {
                ...prev,
                version: e.target.value,
              }
            }
          })
        }
      />
      <Textarea
        label={`${t('common.description')}*`}
        className="mt-6"
        value={description}
        onChange={(e) =>
          setNewProjectSettings((prev) => {
            if (prev) {
              return {
                ...prev,
                description: e.target.value,
              }
            }
          })
        }
      />
    </div>
  )
})

export default ProjectTab
