import { faUndo } from '@fortawesome/free-solid-svg-icons'
import { DiagramsThemeSettings } from '@keadex/c4-model-ui-kit'
import { Button, ColorPicker, IconButton } from '@keadex/keadex-ui-kit/cross'
import React, { Dispatch, SetStateAction } from 'react'
import { useTranslation } from 'react-i18next'
import { Project } from '../../models/autogenerated/Project'
import { ProjectSettings } from '../../models/autogenerated/ProjectSettings'
import { ThemesSettings } from '../../models/autogenerated/ThemesSettings'

type DiagramsThemeConfig = {
  i18nKey: string
  settings: {
    i18nKey: string
    modelName: keyof DiagramsThemeSettings
  }[]
}

export type DiagramsThemeTabProps = {
  setNewProjectSettings: Dispatch<SetStateAction<ProjectSettings | undefined>>
  project: Project | undefined
  defaultProjectSettings: ProjectSettings
  themeSettings?: ThemesSettings
  openResetModal?: string
  setOpenResetModal: Dispatch<SetStateAction<string | undefined>>
}

const diagramsThemeConfigs: DiagramsThemeConfig[] = [
  {
    i18nKey: 'common.diagram',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.bg_color',
        modelName: 'bg_color_diagram',
      },
    ],
  },
  {
    i18nKey: 'common.legend',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.text_color',
        modelName: 'text_color_legend_title',
      },
    ],
  },
  {
    i18nKey: 'common.person',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.bg_color',
        modelName: 'bg_color_person',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.border_color',
        modelName: 'border_color_person',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.text_color',
        modelName: 'text_color_person',
      },
    ],
  },
  {
    i18nKey: 'common.person_external',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.bg_color',
        modelName: 'bg_color_person_ext',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.border_color',
        modelName: 'border_color_person_ext',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.text_color',
        modelName: 'text_color_person_ext',
      },
    ],
  },
  {
    i18nKey: 'common.software_system',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.bg_color',
        modelName: 'bg_color_software_system',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.border_color',
        modelName: 'border_color_software_system',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.text_color',
        modelName: 'text_color_software_system',
      },
    ],
  },
  {
    i18nKey: 'common.software_system_external',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.bg_color',
        modelName: 'bg_color_software_system_ext',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.border_color',
        modelName: 'border_color_software_system_ext',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.text_color',
        modelName: 'text_color_software_system_ext',
      },
    ],
  },
  {
    i18nKey: 'common.container',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.bg_color',
        modelName: 'bg_color_container',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.border_color',
        modelName: 'border_color_container',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.text_color',
        modelName: 'text_color_container',
      },
    ],
  },
  {
    i18nKey: 'common.container_external',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.bg_color',
        modelName: 'bg_color_container_ext',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.border_color',
        modelName: 'border_color_container_ext',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.text_color',
        modelName: 'text_color_container_ext',
      },
    ],
  },
  {
    i18nKey: 'common.component',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.bg_color',
        modelName: 'bg_color_component',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.border_color',
        modelName: 'border_color_component',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.text_color',
        modelName: 'text_color_component',
      },
    ],
  },
  {
    i18nKey: 'common.component_external',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.bg_color',
        modelName: 'bg_color_component_ext',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.border_color',
        modelName: 'border_color_component_ext',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.text_color',
        modelName: 'text_color_component_ext',
      },
    ],
  },
  {
    i18nKey: 'common.boundary',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.bg_color',
        modelName: 'bg_color_boundary',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.border_color',
        modelName: 'border_color_boundary',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.text_color',
        modelName: 'text_color_boundary',
      },
    ],
  },
  {
    i18nKey: 'common.deployment_node',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.bg_color',
        modelName: 'bg_color_deployment_node',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.border_color',
        modelName: 'border_color_deployment_node',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.text_color',
        modelName: 'text_color_deployment_node',
      },
    ],
  },
  {
    i18nKey: 'common.relationship',
    settings: [
      {
        i18nKey: 'project_settings.themes.diagrams_theme.bg_color',
        modelName: 'bg_color_relationship',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.line_color',
        modelName: 'line_color_relationship',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.text_color',
        modelName: 'text_color_relationship',
      },
      {
        i18nKey: 'project_settings.themes.diagrams_theme.selection_color',
        modelName: 'selected_color_relationship',
      },
    ],
  },
]

export const DiagramsThemeTab = React.memo((props: DiagramsThemeTabProps) => {
  const { t } = useTranslation()

  const {
    setNewProjectSettings,
    project,
    defaultProjectSettings,
    themeSettings,
    openResetModal,
    setOpenResetModal,
  } = props

  function resetColor(
    type: 'reset' | 'default',
    modelName: keyof DiagramsThemeSettings,
  ) {
    let color: string | undefined
    if (
      type === 'reset' &&
      project?.project_settings.themes_settings?.diagrams_theme_settings
    ) {
      color =
        project.project_settings.themes_settings.diagrams_theme_settings[
          modelName
        ]
    }
    if (!color || type === 'default') {
      color =
        defaultProjectSettings.themes_settings!.diagrams_theme_settings![
          modelName
        ]
    }

    setNewProjectSettings((prev) => {
      if (prev)
        return {
          ...prev,
          themes_settings: {
            ...prev.themes_settings,
            diagrams_theme_settings: {
              ...prev.themes_settings?.diagrams_theme_settings,
              [modelName]: color,
            },
          },
        }
    })
  }

  function renderDiagramThemeSettings(
    diagramsThemeConfigs: DiagramsThemeConfig[],
  ): JSX.Element[] {
    const renderedElements: JSX.Element[] = []
    diagramsThemeConfigs.forEach((diagramsThemeConfig) => {
      const renderedSettings: JSX.Element[] = []
      diagramsThemeConfig.settings.forEach((settings) => {
        renderedSettings.push(
          <div
            className="project-settings__diagrams-theme-settings"
            key={settings.i18nKey}
          >
            <span className="my-auto">{t(settings.i18nKey)}:</span>
            <ColorPicker
              color={
                themeSettings?.diagrams_theme_settings?.[
                  `${settings.modelName}`
                ] ??
                defaultProjectSettings.themes_settings
                  ?.diagrams_theme_settings?.[`${settings.modelName}`]
              }
              onChange={(colorResult) => {
                setNewProjectSettings((prev) => {
                  if (prev)
                    return {
                      ...prev,
                      themes_settings: {
                        ...themeSettings,
                        diagrams_theme_settings: {
                          ...themeSettings?.diagrams_theme_settings,
                          [settings.modelName]: colorResult.hex,
                        },
                      },
                    }
                })
              }}
            />
            <div>
              <IconButton
                icon={faUndo}
                className="ml-2"
                onClick={() =>
                  setOpenResetModal(
                    `${diagramsThemeConfig.i18nKey}-${settings.modelName}`,
                  )
                }
              />
              <div className="absolute pr-5 pb-5 pointer-events-none">
                <div
                  className={`ml-2 flex flex-row bg-secondary p-2 rounded ${
                    openResetModal ===
                    `${diagramsThemeConfig.i18nKey}-${settings.modelName}`
                      ? 'flex'
                      : 'hidden'
                  }`}
                >
                  <Button
                    className="p-1 h-fit w-[6rem] pointer-events-auto"
                    onClick={() => resetColor('reset', settings.modelName)}
                  >
                    {t('common.reset')}
                  </Button>
                  <Button
                    className="ml-2 p-1 h-fit w-[6rem] pointer-events-auto"
                    onClick={() => resetColor('default', settings.modelName)}
                  >
                    {t('common.default')}
                  </Button>
                </div>
              </div>
            </div>
          </div>,
        )
      })
      renderedElements.push(
        <div className="flex flex-col" key={diagramsThemeConfig.i18nKey}>
          <span className="mt-5 text-brand1">
            {t(diagramsThemeConfig.i18nKey)}
          </span>
          <div className="static mt-2 grid grid-cols-3 gap-x-4">
            {renderedSettings}
          </div>
        </div>,
      )
    })

    return renderedElements
  }

  return (
    <div className="flex flex-col">
      <span className="text-brand1 font-bold mt-5 text-lg">
        {t('project_settings.themes.diagrams_theme.title')}
      </span>
      {renderDiagramThemeSettings(diagramsThemeConfigs)}
    </div>
  )
})

export default DiagramsThemeTab
