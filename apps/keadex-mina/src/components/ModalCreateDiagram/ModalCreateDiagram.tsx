import {
  DIAGRAM_TYPES,
  Diagram,
  DiagramType,
  diagramTypeHumanName,
} from '@keadex/c4-model-ui-kit'
import { Input, Select, renderButtons } from '@keadex/keadex-ui-kit/cross'
import { useState } from 'react'
import { useTranslation } from 'react-i18next'
import { toast } from 'react-toastify'
import { createDiagram, duplicateDiagram } from '../../core/tauri-rust-bridge'
import { MinaError } from '../../models/autogenerated/MinaError'

export interface ModalCreateDiagramProps {
  mode: 'create' | 'duplicate'
  diagramName?: string
  diagramType?: DiagramType
  hideModal: () => void
  forceUpdate: () => void
}

export const ModalCreateDiagram = (props: ModalCreateDiagramProps) => {
  const { t } = useTranslation()
  const [diagram, setDiagram] = useState<{
    diagramName: string
    diagramType: DiagramType
  }>({
    diagramName: props.diagramName ?? '',
    diagramType: props.diagramType ?? DIAGRAM_TYPES[0],
  })

  function handleConfirmClick() {
    if (props.mode === 'create') {
      createDiagram(diagram.diagramName, diagram.diagramType)
        .then((success) => {
          if (success) {
            toast.info(t('common.info.done'))
            props.forceUpdate()
            props.hideModal()
          }
        })
        .catch((error: MinaError) => {
          toast.error(error.msg)
        })
    } else {
      if (props.diagramName && props.diagramType) {
        duplicateDiagram(
          props.diagramName,
          props.diagramType,
          diagram.diagramName,
          diagram.diagramType
        )
          .then((success) => {
            if (success) {
              toast.info(t('common.info.done'))
              props.forceUpdate()
              props.hideModal()
            }
          })
          .catch((error: MinaError) => {
            toast.error(error.msg)
          })
      }
    }
  }

  return (
    <div>
      {/* Modal body */}
      <div className="modal__body">
        <Input
          type="text"
          label={t('common.name')}
          className="mt-2"
          value={diagram.diagramName}
          onChange={(e) =>
            setDiagram({
              ...diagram,
              diagramName: e.target.value,
            })
          }
        />
        <Select
          id="diagram-type-selector"
          label={t('common.type')}
          className="mt-6"
          value={diagram.diagramType}
          options={DIAGRAM_TYPES.map((diagramType) => {
            return {
              label: diagramTypeHumanName(diagramType),
              value: diagramType,
            }
          })}
          onChange={(e) =>
            setDiagram({
              ...diagram,
              diagramType: e.target.value as DiagramType,
            })
          }
        />
      </div>

      {/* Modal footer */}
      <div className="modal__footer">
        {renderButtons([
          {
            key: 'button-cancel',
            children: <span>{t('common.cancel')}</span>,
            'data-te-modal-dismiss': true,
          },
          {
            key: 'button-create',
            children: (
              <span>
                {props.mode === 'create'
                  ? t('common.create')
                  : t('common.duplicate')}
              </span>
            ),
            disabled: !diagram.diagramName || !diagram.diagramType,
            onClick: handleConfirmClick,
          },
        ])}
      </div>
    </div>
  )
}

export default ModalCreateDiagram
