import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { Button, useModal, useSafeExit } from '@keadex/keadex-ui-kit/cross'
import React from 'react'
import { useTranslation } from 'react-i18next'
import { useNavigate } from 'react-router-dom'
import { toast } from 'react-toastify'
import { faKeadexMina } from '../../../../assets/icons'
import ROUTES, { HOME, HOME_PROJECT } from '../../../../core/router/routes'
import { useAppDispatch, useAppSelector } from '../../../../core/store/hooks'
import { closeProject as closeProjectEvent } from '../../../../core/store/slices/project-slice'
import { closeProject } from '../../../../core/tauri-rust-bridge'
import { MinaError } from '../../../../models/autogenerated/MinaError'
import ModalCRUProject from '../../../ModalCRUProject/ModalCRUProject'

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface ProjectPanelProps {}

export const ProjectPanel = React.memo((props: ProjectPanelProps) => {
  const { t } = useTranslation()
  const { modal, showModal, hideModal } = useModal()
  const { modal: modalSafeExit, safeExit } = useSafeExit(ROUTES)
  const dispatch = useAppDispatch()
  const navigate = useNavigate()
  const project = useAppSelector((state) => state.project.value)

  // const project: Project = {
  //   description: 'This is my first amazing project built with Mina!',
  //   name: 'My first project',
  //   version: '1.0.0',
  // }

  function handleCloseProject() {
    showModal({
      id: 'confirmCloseProjectModal',
      title: t('common.confirmation').toString(),
      body: t('common.question.confirm_close_project').toString(),
      buttons: [
        {
          key: 'button-cancel',
          children: <span>{t('common.cancel')}</span>,
          'data-te-modal-dismiss': true,
        },
        {
          key: 'button-confirm',
          children: <span>{t('common.confirm')}</span>,
          className: 'button--dangerous',
          onClick: () => {
            if (project?.project_settings.root) {
              closeProject(project?.project_settings.root)
                .then((result) => {
                  if (result) {
                    dispatch(closeProjectEvent())
                    hideModal()
                    navigate(HOME)
                  } else {
                    toast.error(
                      t('common.error.project_not_closed', {
                        errorMessage: 'unknown error',
                      })
                    )
                  }
                })
                .catch((error: MinaError) => {
                  toast.error(
                    t('common.error.project_not_closed', {
                      errorMessage: error.msg,
                    })
                  )
                })
            } else {
              dispatch(closeProjectEvent())
              hideModal()
              navigate(HOME)
            }
          },
        },
      ],
    })
  }

  function handleEditProject(event: React.MouseEvent<HTMLButtonElement>) {
    showModal({
      id: 'editProjectModal',
      title: `${t('common.settings')}`,
      body: (
        <ModalCRUProject project={project} hideModal={hideModal} mode="edit" />
      ),
      buttons: false,
    })
  }

  function handleOpenDiagrams(event: React.MouseEvent<HTMLButtonElement>) {
    safeExit(HOME_PROJECT)
  }

  return (
    <div className="flex flex-col p-4 text-center">
      {modal}
      {modalSafeExit}
      <div className="text-brand1 mt-4 text-4xl">
        <FontAwesomeIcon icon={faKeadexMina} />
      </div>
      <div className="text-accent-primary mt-2 text-lg font-bold">
        {project?.project_settings?.name}
      </div>
      <div className="mt-1 text-sm font-light italic">
        v{project?.project_settings?.version}
      </div>
      <div className="mt-4 text-left">
        {project?.project_settings?.description}
      </div>
      <div className="mt-5">
        <Button className="mr-3 mt-3 w-24" onClick={handleEditProject}>
          {t('common.settings')}
        </Button>
        <Button className="mr-3 mt-3 w-24" onClick={handleOpenDiagrams}>
          {t('common.diagrams')}
        </Button>
      </div>
      <div className="flex-grow">
        <Button
          className="button--dangerous absolute bottom-8 left-1/2 w-24 -translate-x-1/2"
          onClick={handleCloseProject}
        >
          {t('common.close')}
        </Button>
      </div>
    </div>
  )
})

export default ProjectPanel
