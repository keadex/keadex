import { faSearch } from '@fortawesome/free-solid-svg-icons'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { c4ElementTypePathName } from '@keadex/c4-model-ui-kit'
import {
  Accordion,
  AccordionItem,
  SearchButton,
  useSafeExit,
} from '@keadex/keadex-ui-kit/cross'
import React, { useContext, useEffect, useState } from 'react'
import { useTranslation } from 'react-i18next'
import { useLocation } from 'react-router-dom'
import AppEventContext, {
  AppEventType,
} from '../../../../context/AppEventContext'
import ROUTES, {
  BASE_PATH_LIBRARY,
  EDIT_DIAGRAM,
} from '../../../../core/router/routes'
import { useAppSelector } from '../../../../core/store/hooks'
import {
  diagramNameTypeFromPath,
  libraryElementTypeFromPath,
  search,
} from '../../../../core/tauri-rust-bridge'
import { FileSearchResult } from '../../../../models/autogenerated/FileSearchResult'
import { FileSearchResults } from '../../../../models/autogenerated/FileSearchResults'
import { DiagramEditorState } from './../../../../views/DiagramEditor/DiagramEditor'
import { sep } from '@tauri-apps/api/path'

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface SearchPanelProps {}

export const SearchPanel = React.memo((props: SearchPanelProps) => {
  const location = useLocation()
  const { t } = useTranslation()
  const { modal: modalSafeExit, safeExit } = useSafeExit(ROUTES)
  const project = useAppSelector((state) => state.project.value)
  const [isSearching, setIsSearching] = useState(false)
  const [searchValue, setSearchValue] = useState('')
  const [searchedValue, setSearchedValue] = useState('')
  const [searchResults, setSearchResults] = useState<FileSearchResults | null>()
  const context = useContext(AppEventContext)

  function highlightResult(results: string): string {
    const regex = new RegExp(searchedValue, 'gi')
    return results.replaceAll(regex, (match) => {
      return `<span class='search-highlighted'>${match}</span>`
    })
  }

  async function openDiagram(path: string) {
    const diagram = await diagramNameTypeFromPath(path)
    if (diagram && diagram.diagram_name && diagram.diagram_type) {
      const state: DiagramEditorState = {
        diagramName: diagram.diagram_name,
        diagramType: diagram.diagram_type,
      }
      if (location.pathname === EDIT_DIAGRAM) {
        context?.emit({ type: AppEventType.OpenDiagram, data: { state } })
      } else {
        safeExit(EDIT_DIAGRAM, {
          state,
        })
      }
    }
  }

  async function openLibrary(path: string) {
    const c4ElementType = await libraryElementTypeFromPath(path)
    safeExit(`${BASE_PATH_LIBRARY}${c4ElementTypePathName(c4ElementType)}`)
  }

  async function handleSearchResultItemClick(item: FileSearchResult[]) {
    if (item.length > 0) {
      const category = item[0].category
      const path = item[0].path
      if (category === 'Diagram') {
        await openDiagram(path)
      } else if (category === 'Library') {
        await openLibrary(path)
      }
    }
  }

  function renderResults(): JSX.Element {
    if (searchedValue.replace(/ /g, '').length > 0) {
      if (searchResults && Object.keys(searchResults.results).length > 0) {
        const result =
          searchResults.count === 1
            ? t('common.result').toLowerCase()
            : t('common.results').toLowerCase()
        let count = `${searchResults.count} ${result}`
        if (searchResults.reached_limit) {
          count = t('common.info.limit_results', { count: searchResults.count })
        }

        const accordionItems: AccordionItem<FileSearchResult[]>[] = []
        Object.keys(searchResults.results).forEach((filePath) => {
          accordionItems.push({
            header: project?.project_settings.root
              ? filePath.replaceAll(
                  `${project.project_settings.root}${sep}`,
                  '',
                )
              : filePath,
            body: highlightResult(
              searchResults.results[filePath]
                .map((result) => result.line_content)
                .join('\n'),
            ),
            parseHtmlBody: true,
            data: searchResults.results[filePath],
          })
        })
        return (
          <div className="contents h-full">
            <div className="mb-2 w-full px-4 text-left text-sm">{count}</div>
            <Accordion<FileSearchResult[]>
              id="search-results"
              className="h-full overflow-auto"
              items={accordionItems}
              showButtonTooltip
              buttonIconPosition="left"
              onBodyClick={(item) => handleSearchResultItemClick(item)}
            />
          </div>
        )
      } else {
        return <span className="mt-4">{t('common.info.no_results')}</span>
      }
    }
    return <></>
  }

  function handleKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {
    if (e.key === 'Enter') {
      handleSearch()
    }
  }

  function handleSearch() {
    if (searchValue.replace(/ /g, '').length > 0) {
      setIsSearching(true)
      search(searchValue, true, true, 1000).then((results) => {
        setIsSearching(false)
        setSearchedValue(searchValue)
        setSearchResults(results)
      })
    }
  }

  useEffect(() => {
    if (project === undefined) {
      setSearchValue('')
      setSearchedValue('')
      setSearchResults(null)
    }
  }, [project])

  return (
    <div id="search-panel" className="flex h-full flex-col text-center">
      {modalSafeExit}

      <div className="p-4 pb-0">
        {/* ----- Header ----- */}
        <div className="text-brand1 mt-4 text-4xl">
          <FontAwesomeIcon icon={faSearch} />
        </div>
        <div className="text-accent-primary mt-2 text-lg font-bold">
          {t('common.search')}
        </div>

        {/* ----- Form ----- */}
        <div className="mt-5">
          <SearchButton
            autoComplete="off"
            value={searchValue}
            onKeyDown={handleKeyDown}
            fixedWidth
            loading={isSearching}
            onChange={(e) => {
              setSearchValue(e.target.value)
            }}
            onIconClick={() => handleSearch()}
          />
        </div>
      </div>

      {/* ----- Results ----- */}
      {renderResults()}
    </div>
  )
})

export default SearchPanel
