import type { DropdownMenuProps, ModalProps } from '@keadex/keadex-ui-kit/cross'
import { WindowTitlebarMenuFactory } from '@keadex/keadex-ui-kit/desktop'
import { AnyAction, Dispatch } from '@reduxjs/toolkit'
import { dialog } from '@tauri-apps/api'
import { exit } from '@tauri-apps/api/process'
import { EventEmitter } from 'ahooks/lib/useEventEmitter'
import { TFunction } from 'i18next'
import { Location, NavigateFunction } from 'react-router'
import { toast } from 'react-toastify'
import { AppEvent, AppEventType } from '../../context/AppEventContext'
import { HOME, HOME_PROJECT } from '../../core/router/routes'
import {
  closeProject as closeProjectEvent,
  openProject as openProjectEvent,
} from '../../core/store/slices/project-slice'
import {
  closeProject as closeProjectAPI,
  openProject as openProjectAPI,
} from '../../core/tauri-rust-bridge'
import { MinaError } from '../../models/autogenerated/MinaError'
import { open } from '@tauri-apps/api/shell'
import ModalAbout from '../ModalAbout/ModalAbout'
import { emit } from '@tauri-apps/api/event'
import { checkUpdate } from '@tauri-apps/api/updater'

export type WindowTitlebarMenuFactoryData = {
  currentProjectRoot?: string
  dispatch: Dispatch<AnyAction>
  showModal: (modalContent: ModalProps) => void
  hideModal: () => void
}

const factory: WindowTitlebarMenuFactory<
  AppEvent,
  WindowTitlebarMenuFactoryData
> = (
  t: TFunction<'translation', undefined>,
  context: EventEmitter<AppEvent> | null,
  navigate: NavigateFunction,
  location: Location,
  data: WindowTitlebarMenuFactoryData,
): DropdownMenuProps => {
  const openProject = (path: string) => {
    openProjectAPI(path)
      .then((project) => {
        data.dispatch(openProjectEvent(project))
        navigate(HOME_PROJECT)
      })
      .catch((error: MinaError) => {
        toast.error(
          t('common.error.project_not_opened', { errorMessage: error.msg }),
        )
      })
  }

  const closeProject = (path: string, onClosed: () => void) => {
    closeProjectAPI(path)
      .then((result) => {
        if (result) {
          onClosed()
        } else {
          toast.error(
            t('common.error.project_not_closed', {
              errorMessage: 'unknown error',
            }),
          )
        }
      })
      .catch((error: MinaError) => {
        toast.error(
          t('common.error.project_not_closed', {
            errorMessage: error.msg,
          }),
        )
      })
  }

  const handleCloseProject = (onClosed?: () => void) => {
    let _onClosed = onClosed
    let confirmMessage = 'common.question.confirm_exit'
    if (onClosed === undefined) {
      _onClosed = () => {
        data.dispatch(closeProjectEvent())
        data.hideModal()
        navigate(HOME)
      }
      confirmMessage = 'common.question.confirm_close_project'
    }

    if (data.currentProjectRoot) {
      data.showModal({
        id: 'confirmCloseProjectModal',
        title: t('common.confirmation').toString(),
        body: t(confirmMessage).toString(),
        buttons: [
          {
            key: 'button-cancel',
            children: <span>{t('common.cancel')}</span>,
            'data-te-modal-dismiss': true,
          },
          {
            key: 'button-confirm',
            children: <span>{t('common.confirm')}</span>,
            className: 'button--dangerous',
            onClick: () => {
              closeProject(data.currentProjectRoot!, _onClosed!)
            },
          },
        ],
      })
    } else {
      _onClosed!()
    }
  }

  const handleOpenProject = () => {
    dialog.open({ directory: true }).then(async (path) => {
      if (Array.isArray(path)) toast.error(t('common.error.invalid_path'))
      else if (path) {
        data.showModal({
          id: 'confirmOpenProjectModal',
          title: `${t('common.confirmation')}`,
          body: `${t(
            'common.question.confirm_not_saved_changed_current_project',
          )}`,
          buttons: [
            {
              key: 'button-cancel',
              children: <span>{t('common.cancel')}</span>,
              'data-te-modal-dismiss': true,
            },
            {
              key: 'button-confirm',
              children: <span>{t('common.confirm')}</span>,
              className: 'button--dangerous',
              onClick: async () => {
                if (data.currentProjectRoot) {
                  closeProjectAPI(data.currentProjectRoot)
                    .then((result) => {
                      if (result) {
                        openProject(path)
                      } else {
                        toast.error(
                          t('common.error.project_not_closed', {
                            errorMessage: 'unknown error',
                          }),
                        )
                      }
                    })
                    .catch((error: MinaError) => {
                      toast.error(
                        t('common.error.project_not_closed', {
                          errorMessage: error.msg,
                        }),
                      )
                    })
                  data.hideModal()
                }
              },
            },
          ],
        })
      }
    })
  }

  const handleExit = () => {
    handleCloseProject(() => {
      exit()
    })
  }

  const handleSearch = () => {
    context?.emit({ type: AppEventType.OpenSearch })
  }

  const handleDocumentation = () => {
    open('https://keadex.dev/en/docs/mina')
  }

  const handleC4Model = () => {
    open('https://c4model.com/')
  }

  const handleC4PlantUML = () => {
    open('https://github.com/plantuml-stdlib/C4-PlantUML/')
  }

  const handleGitHubRepo = () => {
    open('https://github.com/keadex/keadex/tree/main/apps/keadex-mina')
  }

  const handleReportIssue = () => {
    open(
      'https://github.com/keadex/keadex/issues/new?assignees=&labels=keadex+mina&projects=&template=keadex-mina-bug.md&title=%5BKeadex+Mina+Bug%5D',
    )
  }

  const handleAbout = () => {
    data.showModal({
      id: 'aboutModal',
      title: `Keadex Mina`,
      body: <ModalAbout />,
      buttons: false,
    })
  }

  const handleCheckForUpdates = () => {
    checkUpdate().then((result) => {
      if (result.shouldUpdate) {
        emit('tauri://update')
      } else {
        toast.info(t('common.info.youre_up_to_date'))
      }
    })
  }

  //-------------------------------- Menu
  const menuItemsProps = []

  //------- File menu item
  const fileSubMenuItems = []
  if (location.pathname !== HOME) {
    fileSubMenuItems.push(
      // {
      //   isHeaderMenuItem: false,
      //   id: 'wbar_file_new_project',
      //   label: t('common.action.new_project').toString(),
      //   onClick: undefined,
      //   disabled: true,
      // },
      {
        isHeaderMenuItem: false,
        id: 'wbar_file_open_project',
        label: t('common.action.open_project').toString(),
        onClick: handleOpenProject,
      },
      {
        isHeaderMenuItem: false,
        id: 'wbar_file_close_project',
        label: t('common.action.close_project').toString(),
        onClick: () => handleCloseProject(),
      },
      {
        id: 'wbar_file_separator',
        isSepator: true,
      },
    )
  }
  fileSubMenuItems.push({
    isHeaderMenuItem: false,
    id: 'wbar_file_exit',
    label: t('common.exit').toString(),
    onClick: handleExit,
  })
  menuItemsProps.push({
    isHeaderMenuItem: true,
    id: 'wbar_file',
    label: t('common.file').toString(),
    onClick: undefined,
    subMenuItems: fileSubMenuItems,
  })

  //------- Edit menu item
  if (location.pathname !== HOME) {
    menuItemsProps.push({
      isHeaderMenuItem: true,
      id: 'wbar_edit',
      label: t('common.edit').toString(),
      onClick: undefined,
      subMenuItems: [
        {
          isHeaderMenuItem: false,
          id: 'wbar_edit_search',
          label: t('common.search').toString(),
          onClick: handleSearch,
        },
      ],
    })
  }

  //------- Help menu item
  menuItemsProps.push({
    isHeaderMenuItem: true,
    id: 'wbar_help',
    label: t('common.help').toString(),
    onClick: undefined,
    subMenuItems: [
      {
        isHeaderMenuItem: false,
        id: 'wbar_help_documentation',
        label: t('common.documentation').toString(),
        onClick: handleDocumentation,
      },
      {
        isHeaderMenuItem: false,
        id: 'wbar_help_c4_model',
        label: t('common.c4_model').toString(),
        onClick: handleC4Model,
      },
      {
        isHeaderMenuItem: false,
        id: 'wbar_help_c4_plantuml',
        label: t('common.c4_plantuml').toString(),
        onClick: handleC4PlantUML,
      },
      {
        isHeaderMenuItem: false,
        id: 'wbar_help_github_repo',
        label: t('common.github_repo').toString(),
        onClick: handleGitHubRepo,
      },
      {
        id: 'wbar_help_separator1',
        isSepator: true,
      },
      {
        isHeaderMenuItem: false,
        id: 'wbar_help_report_issue',
        label: t('common.action.report_issue').toString(),
        onClick: handleReportIssue,
      },
      {
        id: 'wbar_help_separator2',
        isSepator: true,
      },
      {
        isHeaderMenuItem: false,
        id: 'wbar_help_check_for_updates',
        label: t('common.action.check_for_updates').toString(),
        onClick: handleCheckForUpdates,
      },
      {
        id: 'wbar_help_separator3',
        isSepator: true,
      },
      {
        isHeaderMenuItem: false,
        id: 'wbar_help_about',
        label: t('common.about').toString(),
        onClick: handleAbout,
      },
    ],
  })

  return {
    menuItemsProps,
  }
}

export default factory
