import {
  IconButton,
  Input,
  Radio,
  Textarea,
  renderButtons,
} from '@keadex/keadex-ui-kit/cross'
import { useState } from 'react'
import { toast } from 'react-toastify'
import { useAppDispatch } from '../../core/store/hooks'
import { saveProject } from '../../core/store/slices/project-slice'
import {
  createProject,
  saveProjectSettings,
} from '../../core/tauri-rust-bridge'
import { MinaError } from '../../models/autogenerated/MinaError'
import { Project } from '../../models/autogenerated/Project'
import { useTranslation } from 'react-i18next'
import { ProjectSettings } from '../../models/autogenerated/ProjectSettings'
import { faFolder } from '@fortawesome/free-solid-svg-icons'
import { dialog } from '@tauri-apps/api'
import { NAME_REGEX, VERSION_REGEX } from '../../constants/regex'

export interface ModalCRUProjectProps {
  mode: 'edit' | 'create'
  project?: Project
  hideModal: () => void
  onProjectCreated?: (projectRoot: string) => void
}

const emptyProjectSettings: ProjectSettings = {
  root: '',
  name: '',
  description: '',
  version: '',
  openai_api_key: '',
  autosave_enabled: false,
  autosave_interval_seconds: 0,
}

export const ModalCRUProject = (props: ModalCRUProjectProps) => {
  const AI_ENABLED = JSON.parse(import.meta.env.VITE_AI_ENABLED)

  const { t } = useTranslation()
  const dispatch = useAppDispatch()
  const [newProjectSettings, setNewProjectSettings] = useState<
    ProjectSettings | undefined
  >(
    props.mode === 'edit'
      ? props.project?.project_settings
      : emptyProjectSettings,
  )

  function chooseProjectDirectory() {
    if (newProjectSettings) {
      dialog.open({ directory: true }).then(async (path) => {
        if (Array.isArray(path)) toast.error(t('common.error.invalid_path'))
        else if (path) {
          setNewProjectSettings({
            ...newProjectSettings,
            root: path,
          })
        }
      })
    }
  }

  function checkValues(projectSettings: ProjectSettings) {
    if (
      projectSettings.autosave_interval_seconds !== null &&
      (projectSettings.autosave_interval_seconds < 0 ||
        projectSettings.autosave_interval_seconds > 240)
    ) {
      toast.error(
        `${t('common.invalid')} "${t('common.autosave'.toLowerCase())}" ${t(
          'common.value',
        ).toLowerCase()}`,
      )
    }
  }

  function handleConfirmClick() {
    if (newProjectSettings) {
      checkValues(newProjectSettings)
      if (props.mode === 'edit') {
        // Editing the project settings
        if (props.project?.project_settings) {
          const newProject: Project = {
            ...props.project,
            project_settings: {
              ...props.project?.project_settings,
              ...newProjectSettings,
            },
          }
          saveProjectSettings(newProjectSettings)
            .then((result) => {
              dispatch(saveProject(newProject))
              toast.info(t('common.info.done'))
              props.hideModal()
            })
            .catch((error: MinaError) => {
              toast.error(error.msg)
            })
        }
      } else {
        // Creating a new project
        createProject(newProjectSettings)
          .then((result) => {
            toast.info(t('common.info.done'))
            props.hideModal()
            if (props.onProjectCreated) props.onProjectCreated(result.root)
          })
          .catch((error: MinaError) => {
            toast.error(error.msg)
          })
      }
    }
  }

  if (newProjectSettings) {
    return (
      <div>
        {/* Modal body */}
        <div className="modal__body">
          {props.mode === 'create' && (
            <IconButton
              icon={faFolder}
              onClick={chooseProjectDirectory}
              className="flex"
              classNameIcon="mt-[3px]"
              classNameContent="ml-3"
            >
              {newProjectSettings.root.replace(/ /g, '').length > 0
                ? newProjectSettings.root
                : t('home.chose_parent_dir_project')}
            </IconButton>
          )}

          <Input
            type="text"
            label={`${t('common.name')}*`}
            className="mt-6"
            allowedChars={NAME_REGEX}
            info={`${t('common.allowed_pattern')}: ${NAME_REGEX}`}
            value={newProjectSettings.name}
            onChange={(e) =>
              setNewProjectSettings({
                ...newProjectSettings,
                name: e.target.value,
              })
            }
          />
          <Input
            type="text"
            label={`${t('common.version')}*`}
            className="mt-6"
            allowedChars={VERSION_REGEX}
            info={`${t('common.allowed_pattern')}: ${VERSION_REGEX}`}
            value={newProjectSettings.version}
            onChange={(e) =>
              setNewProjectSettings({
                ...newProjectSettings,
                version: e.target.value,
              })
            }
          />
          <Textarea
            label={`${t('common.description')}*`}
            className="mt-6"
            value={newProjectSettings.description}
            onChange={(e) =>
              setNewProjectSettings({
                ...newProjectSettings,
                description: e.target.value,
              })
            }
          />
          <div className={`flex flex-row mt-6`}>
            <span>{`${t('common.autosave')}*`}:</span>
            <Radio<boolean>
              id="autosave-status"
              className="ml-5"
              value={newProjectSettings.autosave_enabled}
              options={[
                { label: t('common.enabled'), value: true },
                { label: t('common.disabled'), value: false },
              ]}
              onChange={(value: boolean) => {
                setNewProjectSettings({
                  ...newProjectSettings,
                  autosave_enabled: value,
                  autosave_interval_seconds: value ? 60 : 0,
                })
              }}
            />
          </div>
          <Input
            type="number"
            max={240}
            label={`${t('common.autosave_interval_sec')}`}
            info={`${t('common.max')} 240 ${t('common.seconds').toLowerCase()}`}
            className="mt-6"
            value={
              newProjectSettings.autosave_interval_seconds !== null
                ? newProjectSettings.autosave_interval_seconds
                : 0
            }
            onChange={(e) => {
              setNewProjectSettings({
                ...newProjectSettings,
                autosave_interval_seconds:
                  e.target.value.length > 0
                    ? Number.parseInt(e.target.value)
                    : 0,
              })
            }}
          />
          {AI_ENABLED && (
            <Input
              type="text"
              label={t('common.openai_api_key')}
              className="mt-6"
              value={newProjectSettings.openai_api_key ?? ''}
              onChange={(e) =>
                setNewProjectSettings({
                  ...newProjectSettings,
                  openai_api_key: e.target.value,
                })
              }
            />
          )}
        </div>

        {/* Modal footer */}
        <div className="modal__footer">
          {renderButtons([
            {
              key: 'button-cancel',
              children: <span>{t('common.cancel')}</span>,
              'data-te-modal-dismiss': true,
            },
            {
              key: 'button-save',
              children: (
                <span>
                  {props.mode === 'edit'
                    ? t('common.save')
                    : t('common.create')}
                </span>
              ),
              disabled:
                !newProjectSettings.description ||
                !newProjectSettings.name ||
                !newProjectSettings.version ||
                (props.mode === 'create' && !newProjectSettings.root),
              onClick: handleConfirmClick,
            },
          ])}
        </div>
      </div>
    )
  } else {
    return null
  }
}

export default ModalCRUProject
