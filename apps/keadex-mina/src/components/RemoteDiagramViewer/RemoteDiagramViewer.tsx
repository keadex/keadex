import { Diagram, DiagramListener } from '@keadex/c4-model-ui-kit'
import React, { useEffect, useRef, useState } from 'react'
import { ProjectSettings } from '../../models/autogenerated/ProjectSettings'
import DiagramDesignView, {
  DiagramDesignViewCommands,
} from '../../views/DiagramEditor/DiagramDesignView/DiagramDesignView'
import {
  diagramPlantUMLUrlFromDiagramUrl,
  diagramSpecUrlFromDiagramUrl,
  diagramUrlFromLinkString,
  openRemoteDiagram,
  projectSettingsUrl as projectSettingsUrlApi,
} from '../../core/tauri-rust-bridge'

export interface RemoteDiagramViewerProps {
  projectRootUrl: string
  diagramUrl: string
  ghToken?: string
}

export const RemoteDiagramViewer = React.memo(
  (props: RemoteDiagramViewerProps) => {
    const { projectRootUrl, diagramUrl, ghToken } = props

    const diagramDesignViewRef = useRef<DiagramDesignViewCommands>(null)
    const [diagram, setDiagram] = useState<Diagram | null>()
    const [projectSettings, setProjectSettings] =
      useState<ProjectSettings | null>()
    const [error, setError] = useState<string | null>()

    async function fetchGhRawFile(url: string, ghToken?: string) {
      // The following check is required to reduce the load on the Keadex backend.
      if (ghToken) {
        // Use the Keadex API as a proxy only when a GitHub token is configured.
        // In this case, in fact, you have to invoke the GitHub endpoint by passing
        // the token in the "Authorization" header, which is allowed only on server-side.
        const apiUrl = 'https://keadex.dev/api/download-gh-raw-file'
        const headers: {
          headers: {
            'Keadex-Gh-Url': string
            'Keadex-Gh-Authorization'?: string
          }
        } = {
          headers: {
            'Keadex-Gh-Url': url,
          },
        }
        if (ghToken) {
          headers.headers['Keadex-Gh-Authorization'] = ghToken
        }
        return await fetch(apiUrl, headers)
      } else {
        return await fetch(url)
      }
    }

    async function openDiagram(url: string) {
      diagramDesignViewRef.current?.resetCanvas()
      let projectSettingsUrl
      let plantumlUrl
      let specUrl
      try {
        projectSettingsUrl = await projectSettingsUrlApi(projectRootUrl)
        plantumlUrl = await diagramPlantUMLUrlFromDiagramUrl(
          projectRootUrl,
          url,
        )
        specUrl = await diagramSpecUrlFromDiagramUrl(projectRootUrl, url)
      } catch (e) {
        console.error(e)
        setErrorState(
          'Invalid URL: the provided URL is an invalid Mina project or diagram.',
        )
      }

      if (projectSettingsUrl && plantumlUrl && specUrl) {
        let projectSettingsJson
        let plantuml
        let spec
        try {
          const projectSettingsResponse = await fetchGhRawFile(
            projectSettingsUrl,
            ghToken,
          )
          const plantumlResponse = await fetchGhRawFile(plantumlUrl, ghToken)
          const specResponse = await fetchGhRawFile(specUrl, ghToken)

          if (
            projectSettingsResponse.ok &&
            plantumlResponse.ok &&
            specResponse.ok
          ) {
            projectSettingsJson = await projectSettingsResponse.text()
            plantuml = await plantumlResponse.text()
            spec = await specResponse.text()
          } else {
            throw new Error()
          }
        } catch (e) {
          console.error(e)
          setErrorState(
            'Diagram or project settings not found. Please verify the URLs provided, or, if linking to a private repository, ensure the GitHub token is configured.',
          )
        }

        if (projectSettingsJson && plantuml && spec) {
          try {
            setProjectSettings(
              JSON.parse(projectSettingsJson) as ProjectSettings,
            )
            setDiagram(
              (await openRemoteDiagram(
                projectRootUrl,
                url,
                plantuml,
                spec,
              )) as Diagram,
            )
          } catch (e) {
            setErrorState('Invalid diagram or project settings.')
          }
        }
      }
    }

    function setErrorState(error: string | null) {
      setDiagram(null)
      setError(error)
    }

    const listener: DiagramListener = {
      onOpenDiagramClick: async (link) => {
        let diagramUrl
        try {
          diagramUrl = await diagramUrlFromLinkString(projectRootUrl, link)
        } catch (e) {
          console.error(e)
          setErrorState(
            'Invalid URL: the provided URL is an invalid Mina project or diagram.',
          )
        }
        if (diagramUrl) openDiagram(diagramUrl)
      },
      onOpenExternalLinkClick: (externalLink: string) => {
        window.open(externalLink, '_blank')
      },
    }

    useEffect(() => {
      setErrorState(null)
      openDiagram(diagramUrl)
    }, [diagramUrl, projectRootUrl, ghToken])

    return (
      <div className="h-full w-full border-t flex items-center">
        {error === null && diagram && (
          <DiagramDesignView
            diagramListener={listener}
            diagram={diagram}
            ref={diagramDesignViewRef}
            diagramsThemeSettings={
              projectSettings?.themes_settings?.diagrams_theme_settings
            }
            target="web"
            readOnly
          />
        )}
        {error && <div className="w-full text-center text-black">{error}</div>}
      </div>
    )
  },
)

export default RemoteDiagramViewer
