import { faEllipsisH } from '@fortawesome/free-solid-svg-icons'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { C4ElementType } from '@keadex/c4-model-ui-kit'
import { DropdownMenuProps, ModalProps } from '@keadex/keadex-ui-kit/cross'
import { TFunction } from 'i18next'
import { Project } from '../../models/autogenerated/Project'
import { deleteLibraryElement } from '../../core/tauri-rust-bridge'
import { toast } from 'react-toastify'
import { MinaError } from '../../models/autogenerated/MinaError'
import { LibraryElementType } from './LibraryElement'

function menu(
  t: TFunction,
  c4ElementType: C4ElementType,
  libraryElement: LibraryElementType,
  project: Project | undefined,
  openLibraryElement: (
    mode: 'c' | 'u',
    libraryElement: LibraryElementType | undefined,
    project: Project | undefined,
    enableEdit?: boolean
  ) => void,
  showModal: (modalContent: ModalProps) => void,
  hideModal: () => void,
  forceUpdate: () => void
): DropdownMenuProps {
  const id = `${libraryElement.base_data?.alias}`

  function handleDeleteLibraryElement() {
    showModal({
      id: 'condirmDeleteElement',
      title: t('common.confirmation').toString(),
      body: t('common.question.confirm_delete_element').toString(),
      buttons: [
        {
          key: 'button-cancel',
          children: <span>{t('common.no')}</span>,
          'data-te-modal-dismiss': true,
        },
        {
          key: 'button-confirm',
          children: <span>{t('common.yes')}</span>,
          className: 'button--dangerous',
          onClick: () => {
            if (libraryElement.base_data.uuid) {
              deleteLibraryElement(libraryElement.base_data.uuid, c4ElementType)
                .then(() => {
                  toast.info(t('common.info.done'))
                  forceUpdate()
                  hideModal()
                })
                .catch((error: MinaError) => {
                  toast.error(
                    t('common.error.cannot_delete_element', {
                      errorMessage: error.msg,
                    })
                  )
                })
            }
          },
        },
      ],
    })
  }

  function handleOpenLibraryElement() {
    openLibraryElement('u', libraryElement, project)
  }

  return {
    menuItemsProps: [
      {
        isHeaderMenuItem: true,
        id,
        label: <FontAwesomeIcon icon={faEllipsisH} />,
        onClick: undefined,
        subMenuItems: [
          {
            isHeaderMenuItem: false,
            id: `${id}_open`,
            label: t('common.open').toString(),
            onClick: handleOpenLibraryElement,
          },
          {
            isHeaderMenuItem: false,
            id: `${id}_delete`,
            label: t('common.delete').toString(),
            onClick: handleDeleteLibraryElement,
          },
        ],
      },
    ],
  }
}
export default menu
