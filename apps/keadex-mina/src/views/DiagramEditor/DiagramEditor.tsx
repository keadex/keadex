import { Diagram, DiagramListener, DiagramType } from '@keadex/c4-model-ui-kit'
import { useModal } from '@keadex/keadex-ui-kit/cross'
import { useContext, useEffect, useRef, useState } from 'react'
import { useTranslation } from 'react-i18next'
import { ResizableBox } from 'react-resizable'
import { NavigateOptions, useLocation, useNavigate } from 'react-router-dom'
import { ToastOptions, toast } from 'react-toastify'
import DiagramCodeViewToolbar, {
  DiagramCodeViewToolbarCommands,
} from '../../components/DiagramCodeViewToolbar/DiagramCodeViewToolbar'
import DiagramDesignViewToolbar, {
  DiagramDesignViewToolbarCommands,
} from '../../components/DiagramDesignViewToolbar/DiagramDesignViewToolbar'
import DiagramEditorToolbar from '../../components/DiagramEditorToolbar/DiagramEditorToolbar'
import AppEventContext, { AppEventType } from '../../context/AppEventContext'
import { EDIT_DIAGRAM, HOME_PROJECT } from '../../core/router/routes'
import {
  closeDiagram,
  diagramFromLinkString,
  executeHook,
  loadDiagram,
  saveSpecDiagramRawPlantuml,
} from '../../core/tauri-rust-bridge'
import { MinaError } from '../../models/autogenerated/MinaError'
import DiagramCodeView, {
  DiagramCodeViewCommands,
} from './DiagramCodeView/DiagramCodeView'
import DiagramDesignView, {
  DiagramDesignViewCommands,
  KeadexCanvasState,
} from './DiagramDesignView/DiagramDesignView'
import './DiagramEditor.css'

const TOAST_ERROR_DEFAULT_CONFIGS: ToastOptions = {
  className: 'diagram-editor_toast--error',
  bodyClassName: 'diagram-editor_toast--error-body',
  position: 'bottom-left',
  autoClose: false,
}

export interface DiagramEditorState {
  diagramName: string
  diagramType: DiagramType
}

/* eslint-disable-next-line */
export interface DiagramEditorProps {}

export const DiagramEditor = (props: DiagramEditorProps) => {
  const { state } = useLocation()
  const navigate = useNavigate()
  const { t } = useTranslation()
  const { modal, showModal, hideModal } = useModal()
  const [diagram, setDiagram] = useState<Diagram | undefined>()
  const [isSaving, setIsSaving] = useState(false)
  const [error, setError] = useState<MinaError | undefined>()
  const diagramDesignViewRef = useRef<DiagramDesignViewCommands>(null)
  const diagramCodeViewRef = useRef<DiagramCodeViewCommands>(null)
  const diagramCodeViewToolbarRef = useRef<DiagramCodeViewToolbarCommands>(null)
  const diagramDesignViewToolbarRef =
    useRef<DiagramDesignViewToolbarCommands>(null)
  const context = useContext(AppEventContext)

  context?.useSubscription((event) => {
    if (event.type === AppEventType.OpenDiagram) {
      showModal({
        id: 'confirmOpenDiagramModal',
        title: `${t('common.confirmation')}`,
        body: `${t('common.question.confirm_not_saved_changed')}`,
        buttons: [
          {
            key: 'button-cancel',
            children: <span>{t('common.cancel')}</span>,
            'data-te-modal-dismiss': true,
          },
          {
            key: 'button-confirm',
            children: <span>{t('common.confirm')}</span>,
            className: 'button--dangerous',
            onClick: async () => {
              handleCloseDiagram(false)
              hideModal()
              navigate(EDIT_DIAGRAM, event.data as NavigateOptions | undefined)
            },
          },
        ],
      })
    }
  })

  const diagramEditorState = state as DiagramEditorState

  const diagramListener: DiagramListener = {
    onOpenDiagramClick: (diagramLink) => {
      showModal({
        id: 'confirmGoToDiagramModal',
        title: `${t('common.confirmation')}`,
        body: `${t('common.question.confirm_go_to_diagram')}`,
        buttons: [
          {
            key: 'button-cancel',
            children: <span>{t('common.cancel')}</span>,
            'data-te-modal-dismiss': true,
          },
          {
            key: 'button-confirm',
            children: <span>{t('common.confirm')}</span>,
            className: 'button--dangerous',
            onClick: async () => {
              let diagram
              try {
                diagram = await diagramFromLinkString(diagramLink)
              } catch (e) {
                diagram = undefined
              }
              if (diagram && diagram.diagram_name && diagram.diagram_type) {
                const state: DiagramEditorState = {
                  diagramName: diagram.diagram_name,
                  diagramType: diagram.diagram_type,
                }
                handleCloseDiagram(false)
                hideModal()
                navigate(EDIT_DIAGRAM, {
                  state,
                })
              } else {
                hideModal()
                toast.error(t('common.error.invalid_diagram_link'))
              }
            },
          },
        ],
      })
    },
  }

  useEffect(() => {
    handleOpenDiagram()
  }, [diagramEditorState])

  const isDiagramChanged = (
    prevDiagram: Diagram,
    nextDiagram: Diagram,
  ): boolean => {
    return (
      prevDiagram.raw_plantuml !== nextDiagram.raw_plantuml ||
      diagramDesignViewRef.current?.isDiagramChanged() === true
    )
  }

  const handleOpenDiagram = async () => {
    const diagram = await loadDiagram(
      diagramEditorState.diagramName,
      diagramEditorState.diagramType,
    ).catch((error) => {
      toast.error(error.msg, TOAST_ERROR_DEFAULT_CONFIGS)
      setError(error)
    })
    if (diagram) setDiagram(diagram)
  }

  const handleCloseDiagram = async (
    navigateToHome: boolean,
    canvasState?: KeadexCanvasState,
  ) => {
    await closeDiagram(
      diagramEditorState.diagramName,
      diagramEditorState.diagramType,
    ).catch((error) => {
      toast.error(error.msg, TOAST_ERROR_DEFAULT_CONFIGS)
      setError(error)
    })
    diagramDesignViewRef.current?.resetCanvas(canvasState)

    // In order to avoid flickering effect in the code view due to save and reload,
    // reset the code, and unset diagram and error only if the handleCloseDiagram
    // has been invoked outside the save process (so when "canvasState" is undefined)
    if (!canvasState) {
      diagramCodeViewRef.current?.resetCode()
      setDiagram(undefined)
      setError(undefined)
      if (navigateToHome) navigate(HOME_PROJECT)
    }
  }

  const handleSaveDiagram = async () => {
    if (!isSaving) {
      const updatedRawPlantUML =
        diagramCodeViewRef.current?.getUpdatedRawPlantUML()
      const updatedDiagramSpec =
        diagramDesignViewRef.current?.getUpdatedDiagramSpec()
      if (
        diagram &&
        diagram.diagram_name &&
        diagram.diagram_type &&
        updatedRawPlantUML &&
        updatedDiagramSpec
      ) {
        const updatedDiagram: Diagram = {
          ...diagram,
          raw_plantuml: updatedRawPlantUML,
          diagram_spec: updatedDiagramSpec,
        }

        if (isDiagramChanged(diagram, updatedDiagram)) {
          setIsSaving(true)
          await saveSpecDiagramRawPlantuml(
            diagram.diagram_name,
            diagram.diagram_type,
            updatedRawPlantUML,
            updatedDiagramSpec,
          )
            .then(async () => {
              setError(undefined)
              await handleCloseDiagram(
                true,
                diagramDesignViewRef.current?.getCanvasState(),
              )
              await handleOpenDiagram()
              setIsSaving(false)
              executeHook({
                data: { Diagram: updatedDiagram },
                hook_type: 'onDiagramSaved',
              })
            })
            .catch((error: MinaError) => {
              setIsSaving(false)
              toast.error(error.msg, TOAST_ERROR_DEFAULT_CONFIGS)
              setError(error)
            })
        }
      }
    }
  }

  const showConfirmationModalCloseDiagram = () => {
    showModal({
      id: 'confirmCloseDiagramModal',
      title: t('common.confirmation').toString(),
      body: t('common.question.confirm_close_diagram').toString(),
      buttons: [
        {
          key: 'button-cancel',
          children: <span>{t('common.cancel')}</span>,
          'data-te-modal-dismiss': true,
        },
        {
          key: 'button-confirm',
          children: <span>{t('common.confirm')}</span>,
          className: 'button--dangerous',
          onClick: () => {
            hideModal()
            handleCloseDiagram(true)
          },
        },
      ],
    })
  }

  return (
    <div className="bg-dark-primary flex h-full w-full flex-col overflow-auto">
      {modal}
      <DiagramEditorToolbar
        diagram={diagram}
        saveDiagram={handleSaveDiagram}
        closeDiagram={showConfirmationModalCloseDiagram}
      />
      <div className="flex w-full grow overflow-hidden">
        <div id="diagram-code-editor-box">
          <ResizableBox height={Infinity} width={500} resizeHandles={['e']}>
            <div className="window__inner-border h-full w-full border-t flex flex-col">
              <DiagramCodeViewToolbar
                ref={diagramCodeViewToolbarRef}
                diagramCodeViewCommands={diagramCodeViewRef.current}
              />
              <DiagramCodeView
                ref={diagramCodeViewRef}
                diagram={diagram}
                error={error}
                diagramCodeViewToolbarCommands={
                  diagramCodeViewToolbarRef.current
                }
                saveDiagram={handleSaveDiagram}
                isSaving={isSaving}
              />
            </div>
          </ResizableBox>
        </div>
        <div className="window__inner-border h-full w-full border-t flex flex-col overflow-x-auto">
          <DiagramDesignViewToolbar
            ref={diagramDesignViewToolbarRef}
            diagramDesignViewCommands={diagramDesignViewRef}
          />
          <DiagramDesignView
            ref={diagramDesignViewRef}
            diagramListener={diagramListener}
            diagram={diagram}
            error={error}
            diagramDesignViewToolbarCommands={diagramDesignViewToolbarRef}
            saveDiagram={handleSaveDiagram}
          />
        </div>
      </div>
      <div
        className={`${
          isSaving ? 'opacity-90' : 'opacity-0'
        } bg-dark-brand1 z-[6] absolute bottom-5 left-1/2 -translate-x-1/2 text-center transition duration-200 ease-in-out px-10 py-1 rounded-md pointer-events-none flex`}
      >
        <svg
          className="animate-spin my-auto mr-3 h-5 w-5"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
          ></circle>
          <path
            className="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          ></path>
        </svg>
        <span>{t('diagram_editor.saving_rendering_diagram')}...</span>
      </div>
    </div>
  )
}

export default DiagramEditor
