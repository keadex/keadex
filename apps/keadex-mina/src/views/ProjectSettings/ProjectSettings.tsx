import { BOX, DIAGRAM, LEGEND, RELATIONSHIP } from '@keadex/c4-model-ui-kit'
import { Button, Spinner, Tab, Tabs } from '@keadex/keadex-ui-kit/cross'
import * as dialog from '@tauri-apps/plugin-dialog'
import { useCallback, useEffect, useState } from 'react'
import { useHotkeys } from 'react-hotkeys-hook'
import { useTranslation } from 'react-i18next'
import { toast } from 'react-toastify'
import { Key } from 'ts-key-enum'
import { Tab as TWTab } from 'tw-elements'
import AITab from '../../components/ProjectSettingsTabs/AITab'
import DiagramsThemeTab from '../../components/ProjectSettingsTabs/DiagramsThemeTab'
import EditorTab from '../../components/ProjectSettingsTabs/EditorTab'
import ProjectTab from '../../components/ProjectSettingsTabs/ProjectTab'
import { AI_API_KEY, AI_BASE_URL, AI_MODEL } from '../../constants/ai'
import { ENV_SETTINGS } from '../../core/env-settings'
import { useAppDispatch, useAppSelector } from '../../core/store/hooks'
import { saveProject } from '../../core/store/slices/project-slice'
import {
  createProject,
  saveProjectSettings,
} from '../../core/tauri-rust-bridge'
import { MinaError } from '../../models/autogenerated/MinaError'
import { Project } from '../../models/autogenerated/Project'
import { ProjectSettings as ProjectSettingsType } from '../../models/autogenerated/ProjectSettings'
import './ProjectSettings.css'

export type ProjectSettingsProps = {
  mode: 'edit' | 'create'
  hideModal?: () => void
  onProjectCreated?: (
    projectRoot: string | undefined,
    dirHandle: FileSystemDirectoryHandle | undefined,
  ) => void
}

const defaultProjectSettings: ProjectSettingsType = {
  root: '',
  name: '',
  description: '',
  version: '',
  autosave_enabled: false,
  autosave_interval_seconds: 0,
  ai_settings: {
    api_base_url: AI_BASE_URL,
    api_key: AI_API_KEY,
    model: AI_MODEL,
  },
  themes_settings: {
    diagrams_theme_settings: {
      bg_color_diagram: DIAGRAM.COLOR.BG_COLOR,
      bg_color_boundary: BOX.COLORS.BG_COLOR_BOUNDARY,
      bg_color_component: BOX.COLORS.BG_COLOR_COMPONENT,
      bg_color_component_ext: BOX.COLORS.BG_COLOR_COMPONENT_EXT,
      bg_color_container: BOX.COLORS.BG_COLOR_CONTAINER,
      bg_color_container_ext: BOX.COLORS.BG_COLOR_CONTAINER_EXT,
      bg_color_deployment_node: BOX.COLORS.BG_COLOR_DEPLOYMENT_NODE,
      bg_color_person: BOX.COLORS.BG_COLOR_SOFTWARE_SYSTEM_PERSON,
      bg_color_person_ext: BOX.COLORS.BG_COLOR_SOFTWARE_SYSTEM_PERSON_EXT,
      bg_color_relationship: RELATIONSHIP.COLORS.BG_COLOR,
      bg_color_software_system: BOX.COLORS.BG_COLOR_SOFTWARE_SYSTEM_PERSON,
      bg_color_software_system_ext:
        BOX.COLORS.BG_COLOR_SOFTWARE_SYSTEM_PERSON_EXT,
      border_color_boundary: BOX.COLORS.BORDER_COLOR_BOUNDARY,
      border_color_component: BOX.COLORS.BORDER_COLOR_COMPONENT,
      border_color_component_ext: BOX.COLORS.BORDER_COLOR_COMPONENT_EXT,
      border_color_container: BOX.COLORS.BORDER_COLOR_CONTAINER,
      border_color_container_ext: BOX.COLORS.BORDER_COLOR_CONTAINER_EXT,
      border_color_deployment_node: BOX.COLORS.BORDER_COLOR_DEPLOYMENT_NODE,
      border_color_person: BOX.COLORS.BORDER_COLOR_SOFTWARE_SYSTEM_PERSON,
      border_color_person_ext:
        BOX.COLORS.BORDER_COLOR_SOFTWARE_SYSTEM_PERSON_EXT,
      border_color_software_system:
        BOX.COLORS.BORDER_COLOR_SOFTWARE_SYSTEM_PERSON,
      border_color_software_system_ext:
        BOX.COLORS.BORDER_COLOR_SOFTWARE_SYSTEM_PERSON_EXT,
      line_color_relationship: RELATIONSHIP.COLORS.LINE_COLOR,
      text_color_boundary: BOX.COLORS.TEXT_COLOR_BOUNDARY,
      text_color_component: BOX.COLORS.TEXT_COLOR_COMPONENT,
      text_color_component_ext: BOX.COLORS.TEXT_COLOR_COMPONENT_EXT,
      text_color_container: BOX.COLORS.TEXT_COLOR_CONTAINER,
      text_color_container_ext: BOX.COLORS.TEXT_COLOR_CONTAINER_EXT,
      text_color_deployment_node: BOX.COLORS.TEXT_COLOR_DEPLOYMENT_NODE,
      text_color_legend_title: LEGEND.COLOR.TEXT_COLOR_TITLE,
      text_color_person: BOX.COLORS.TEXT_COLOR_SOFTWARE_SYSTEM_PERSON,
      text_color_person_ext: BOX.COLORS.TEXT_COLOR_SOFTWARE_SYSTEM_PERSON_EXT,
      text_color_relationship: RELATIONSHIP.COLORS.TEXT_COLOR,
      text_color_software_system: BOX.COLORS.TEXT_COLOR_SOFTWARE_SYSTEM_PERSON,
      text_color_software_system_ext:
        BOX.COLORS.TEXT_COLOR_SOFTWARE_SYSTEM_PERSON_EXT,
    },
  },
}

const emptyProjectSettings: ProjectSettingsType = {
  root: '',
  name: '',
  description: '',
  version: '',
  autosave_enabled: defaultProjectSettings.autosave_enabled,
  autosave_interval_seconds: defaultProjectSettings.autosave_interval_seconds,
}

export const ProjectSettings = (props: ProjectSettingsProps) => {
  const AI_ENABLED = ENV_SETTINGS.AI_ENABLED

  const project = useAppSelector((state) => state.project.value)
  const { t } = useTranslation()
  const dispatch = useAppDispatch()

  const [newProjectSettings, setNewProjectSettings] = useState<
    ProjectSettingsType | undefined
  >(props.mode === 'edit' ? project?.project_settings : emptyProjectSettings)
  const [dirHandle, setDirHandle] = useState<
    FileSystemDirectoryHandle | undefined
  >()
  const [openResetModal, setOpenResetModal] = useState<string | undefined>()
  const [isLoading, setIsLoading] = useState(false)

  const chooseProjectDirectory = useCallback(async () => {
    if (ENV_SETTINGS.WEB_MODE) {
      try {
        const directoryHandle = await window.showDirectoryPicker({
          mode: 'readwrite',
        })
        setDirHandle(directoryHandle)
        setNewProjectSettings((prev) => {
          if (prev)
            return {
              ...prev,
              root: directoryHandle.name,
            }
        })
      } catch (e) {
        // user has closed the dir picker without choosing the directory
      }
    } else {
      dialog.open({ directory: true }).then(async (path) => {
        if (Array.isArray(path)) toast.error(t('common.error.invalid_path'))
        else if (path) {
          setNewProjectSettings((prev) => {
            if (prev)
              return {
                ...prev,
                root: path,
              }
          })
        }
      })
    }
  }, [t])

  function checkValues(projectSettings: ProjectSettingsType) {
    if (
      projectSettings.autosave_interval_seconds !== null &&
      (projectSettings.autosave_interval_seconds < 0 ||
        projectSettings.autosave_interval_seconds > 240)
    ) {
      toast.error(
        `${t('common.invalid')} "${t('common.autosave'.toLowerCase())}" ${t(
          'common.value',
        ).toLowerCase()}`,
      )
    }
  }

  function handleConfirmClick() {
    if (newProjectSettings) {
      checkValues(newProjectSettings)
      if (props.mode === 'edit') {
        // Editing the project settings
        if (project?.project_settings) {
          const newProject: Project = {
            ...project,
            project_settings: {
              ...project?.project_settings,
              ...newProjectSettings,
            },
          }
          setIsLoading(true)
          saveProjectSettings(newProjectSettings)
            .then((result) => {
              setIsLoading(false)
              dispatch(saveProject(newProject))
              toast.info(t('common.info.done'))
            })
            .catch((error: MinaError) => {
              setIsLoading(false)
              toast.error(error.msg)
            })
        }
      } else {
        // Creating a new project
        setIsLoading(true)
        createProject(newProjectSettings, dirHandle)
          .then((result) => {
            setIsLoading(false)
            toast.info(t('common.info.done'))
            if (props.hideModal) props.hideModal()
            if (props.onProjectCreated)
              props.onProjectCreated(result.root, dirHandle)
          })
          .catch((error: MinaError) => {
            setIsLoading(false)
            toast.error(error.msg)
          })
      }
    }
  }

  useEffect(() => {
    const triggerTabList: Element[] = [].slice.call(
      document.querySelectorAll('#project-settings-tabs a'),
    )
    triggerTabList.forEach((triggerEl) => {
      const tabTrigger = new TWTab(triggerEl)
      triggerEl.addEventListener('click', (e) => {
        e.preventDefault()
        tabTrigger.show()
      })
    })
  }, [])

  useHotkeys([Key.Escape], (e) => {
    if (openResetModal) {
      e.preventDefault()
      setOpenResetModal(undefined)
    }
  })

  if (newProjectSettings) {
    const tabs: Tab[] = [
      {
        id: 'project-settings-project',
        title: t('common.general'),
        body: (
          <ProjectTab
            mode={props.mode}
            setNewProjectSettings={setNewProjectSettings}
            chooseProjectDirectory={chooseProjectDirectory}
            description={newProjectSettings.description}
            name={newProjectSettings.name}
            root={newProjectSettings.root}
            version={newProjectSettings.version}
          />
        ),
      },
      {
        id: 'project-settings-editor',
        title: t('common.editor'),
        body: (
          <EditorTab
            setNewProjectSettings={setNewProjectSettings}
            autosaveEnabled={newProjectSettings.autosave_enabled}
            autosaveIntervalSeconds={
              newProjectSettings.autosave_interval_seconds
            }
          />
        ),
      },
      {
        id: 'project-settings-diagrams-theme',
        title: t('common.themes'),
        body: (
          <DiagramsThemeTab
            setNewProjectSettings={setNewProjectSettings}
            defaultProjectSettings={defaultProjectSettings}
            project={project}
            themeSettings={newProjectSettings.themes_settings}
            openResetModal={openResetModal}
            setOpenResetModal={setOpenResetModal}
          />
        ),
      },
    ]

    if (AI_ENABLED) {
      tabs.push({
        id: 'project-settings-ai',
        title: t('common.ai'),
        body: (
          <AITab
            setNewProjectSettings={setNewProjectSettings}
            aiSettings={newProjectSettings.ai_settings}
          />
        ),
      })
    }

    return (
      <div className="w-full min-h-full p-3 relative">
        <div
          className={`top-0 bottom-0 left-0 right-0 ${
            openResetModal ? 'absolute' : 'hidden'
          }`}
          onClick={() => setOpenResetModal(undefined)}
        ></div>
        <div className="flex items-center">
          <div
            className={`text-accent-primary inline-block text-2xl font-bold pointer-events-none mt-2`}
          >
            {props.mode === 'create'
              ? t('home.create_project')
              : t(`project_settings.title`)}
          </div>
          <div className={`flex-grow`}>
            <Button
              className="float-right"
              disabled={
                !newProjectSettings.description ||
                !newProjectSettings.name ||
                !newProjectSettings.version ||
                (props.mode === 'create' && !newProjectSettings.root)
              }
              onClick={handleConfirmClick}
              isLoading={isLoading}
            >
              {props.mode === 'edit' ? t('common.save') : t('common.create')}
            </Button>
          </div>
        </div>
        <div className="w-full pb-4 pt-9">
          <Tabs
            id="project-settings-tabs"
            tabs={tabs}
            className="project-settings__tabs"
            tabClassName="!my-0 mx-1 data-[te-nav-active]:border-accent-primary data-[te-nav-active]:bg-brand1"
            bodyClassName="pt-0 flex-grow"
            orientation="top"
          />
        </div>
      </div>
    )
  } else {
    return null
  }
}

export default ProjectSettings
