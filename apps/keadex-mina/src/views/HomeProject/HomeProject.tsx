import { faPlus } from '@fortawesome/free-solid-svg-icons'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import {
  DIAGRAM_TYPES,
  DiagramType,
  diagramTypeHumanName,
} from '@keadex/c4-model-ui-kit'
import {
  Button,
  SearchButton,
  Table,
  TableColumn,
  TableData,
  TableOptions as TableOptionsComponent,
  useForceUpdate,
  useModal,
} from '@keadex/keadex-ui-kit/cross'
import {
  TableOptions,
  Table as TanStackTable,
  getCoreRowModel,
} from '@tanstack/react-table'
import { TFunction } from 'i18next'
import React, { useEffect, useRef, useState } from 'react'
import { useTranslation } from 'react-i18next'
import { useNavigate } from 'react-router-dom'
import { toast } from 'react-toastify'
import ModalCreateDiagram from '../../components/ModalCreateDiagram/ModalCreateDiagram'
import { EDIT_DIAGRAM } from '../../core/router/routes'
import { useAppDispatch, useAppSelector } from '../../core/store/hooks'
import { listDiagrams } from '../../core/tauri-rust-bridge'
import { MinaError } from '../../models/autogenerated/MinaError'
import { DiagramEditorState } from '../DiagramEditor/DiagramEditor'
import './HomeProject.css'
import menu from './diagram-options-menu'

type DiagramData = TableData<{
  name?: string
  diagramName?: string
  diagramType?: DiagramType
  menu?: JSX.Element
}>

/* eslint-disable-next-line */
export interface HomeProjectProps {}

export const HomeProject = React.memo((props: HomeProjectProps) => {
  const { t } = useTranslation()
  const { modal, showModal, hideModal } = useModal()
  const { forceUpdate, updatedCounter } = useForceUpdate()
  const navigate = useNavigate()
  const tableRef = useRef<TanStackTable<DiagramData>>(null)
  const dispatch = useAppDispatch()

  const project = useAppSelector((state) => state.project.value)
  const [data, setData] = useState<DiagramData[]>([])
  const [globalFilter, setGlobalFilter] = React.useState('')

  const columns: TableColumn<DiagramData>[] = [
    {
      accessorKey: 'name',
      label: 'Name',
    },
    {
      accessorKey: 'menu',
      label: 'Options',
      size: 0,
    },
  ]

  const tableOptions: TableOptions<DiagramData> = {
    data,
    columns: [],
    getCoreRowModel: getCoreRowModel(),
    pageCount: 1,
  }

  function openDiagram(diagramName?: string, diagramType?: DiagramType) {
    if (diagramName && diagramType) {
      const state: DiagramEditorState = {
        diagramName,
        diagramType,
      }
      navigate(EDIT_DIAGRAM, {
        state,
      })
    }
  }

  function createData(
    diagrams: {
      [key in DiagramType]: string[]
    },
    t: TFunction,
    forceUpdate: () => void,
    openDiagram: (diagramName?: string, diagramType?: DiagramType) => void,
  ): { data: DiagramData[]; totalRows: number } {
    const data: DiagramData[] = []
    let totalRows = 1
    for (const diagramType of DIAGRAM_TYPES) {
      totalRows++
      const diagramData: DiagramData = {
        name: diagramTypeHumanName(diagramType),
        children: [],
      }

      if (diagrams[diagramType] && diagrams[diagramType].length > 0) {
        totalRows += diagrams[diagramType].length
        diagrams[diagramType].forEach((diagramName) => {
          diagramData.children?.push({
            name: diagramName,
            diagramName,
            diagramType,
            menu: (
              <TableOptionsComponent
                menuOptions={
                  menu(
                    t,
                    project,
                    dispatch,
                    diagramName,
                    diagramType,
                    showModal,
                    hideModal,
                    forceUpdate,
                    openDiagram,
                  ).menuItemsProps
                }
              />
            ),
          })
        })
      } else {
        totalRows++
        diagramData.children?.push({
          name: t('common.info.no_diagrams').toString(),
        })
      }

      data.push(diagramData)
    }
    return { data, totalRows }
  }

  useEffect(() => {
    listDiagrams()
      .then((diagrams) => {
        const tableData = createData(diagrams, t, forceUpdate, openDiagram)
        setData(tableData.data)
        tableRef.current?.setPageSize(tableData.totalRows)
      })
      .catch((error: MinaError) => {
        toast.error(
          t('common.error.project_not_opened', { errorMessage: error.msg }),
        )
      })
  }, [t, updatedCounter, project])

  return (
    <div className="h-full w-full p-3">
      {modal}
      <div className="flex items-center">
        <div className="text-accent-primary inline-block text-2xl font-bold pointer-events-none">
          {t('common.diagrams')}
        </div>
        <div className="ml-5 inline-block w-64">
          <SearchButton onChange={(e) => setGlobalFilter(e.target.value)} />
        </div>
        <div className="flex-grow">
          <Button
            className="float-right bg-red-400"
            onClick={() => {
              showModal({
                id: 'newDiargamModal',
                title: `${t('common.new')} ${t(
                  'common.diagram',
                ).toLowerCase()}`,
                body: (
                  <ModalCreateDiagram
                    mode="create"
                    hideModal={hideModal}
                    forceUpdate={forceUpdate}
                  />
                ),
                buttons: false,
              })
            }}
          >
            <span>
              <FontAwesomeIcon icon={faPlus} />
            </span>
            <span className="ml-1">{`${t('common.create')} ${t(
              'common.diagram',
            )}`}</span>
          </Button>
        </div>
      </div>
      <div className="home-project w-full pb-4 pt-4">
        <Table
          ref={tableRef}
          defaultExpanded
          disableExpandControls
          columns={columns}
          tableOptions={tableOptions}
          globalFilter={globalFilter}
          hidePaginationControls
          hideHeader
          onRowClick={(e, data: DiagramData) =>
            openDiagram(data.diagramName, data.diagramType)
          }
          suppressRowClickColIDs={['menu']}
        />
      </div>
    </div>
  )
})

export default HomeProject
