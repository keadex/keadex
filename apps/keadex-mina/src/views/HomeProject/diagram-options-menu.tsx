import { faEllipsisH } from '@fortawesome/free-solid-svg-icons'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { DiagramType, diagramTypeHumanName } from '@keadex/c4-model-ui-kit'
import { DropdownMenuProps, ModalProps } from '@keadex/keadex-ui-kit/cross'
import { TFunction } from 'i18next'
import { toast } from 'react-toastify'
import { saveProject } from '../../core/store/slices/project-slice'
import { deleteDiagram } from '../../core/tauri-rust-bridge'
import { MinaError } from '../../models/autogenerated/MinaError'
import { Project } from '../../models/autogenerated/Project'
import ModalCreateDiagram from '../../components/ModalCreateDiagram/ModalCreateDiagram'

function menu(
  t: TFunction,
  project: Project | undefined,
  dispatch: any,
  diagramName: string,
  diagramType: DiagramType,
  showModal: (modalContent: ModalProps) => void,
  hideModal: () => void,
  forceUpdate: () => void,
  openDiagram: (diagramName?: string, diagramType?: DiagramType) => void
): DropdownMenuProps {
  const id = `${diagramType}_${diagramName}`

  function handleDeleteDiagram() {
    showModal({
      id: 'condirmDeleteDiagram',
      title: t('common.confirmation').toString(),
      body: t('common.question.confirm_delete_diagram', {
        diagramName,
        diagramType: diagramTypeHumanName(diagramType),
      }).toString(),
      buttons: [
        {
          key: 'button-cancel',
          children: <span>{t('common.no')}</span>,
          'data-te-modal-dismiss': true,
        },
        {
          key: 'button-confirm',
          children: <span>{t('common.yes')}</span>,
          className: 'button--dangerous',
          onClick: () => {
            if (project) {
              deleteDiagram(diagramName, diagramType)
                .then((updatedProjectLibrary) => {
                  toast.info(t('common.info.done'))
                  const newProject: Project = {
                    ...project,
                    project_library: updatedProjectLibrary,
                  }
                  dispatch(saveProject(newProject))
                  forceUpdate()
                  hideModal()
                })
                .catch((error: MinaError) => {
                  toast.error(
                    t('common.error.cannot_delete_diagram', {
                      errorMessage: error.msg,
                    })
                  )
                })
            }
          },
        },
      ],
    })
  }

  function handleOpenDiagram() {
    openDiagram(diagramName, diagramType)
  }

  function handleDuplicateDiagram() {
    showModal({
      id: 'duplicateDiargamModal',
      title: `${t('common.duplicate')} ${t('common.diagram').toLowerCase()}`,
      body: (
        <ModalCreateDiagram
          diagramName={diagramName}
          diagramType={diagramType}
          mode="duplicate"
          hideModal={hideModal}
          forceUpdate={forceUpdate}
        />
      ),
      buttons: false,
    })
  }

  return {
    menuItemsProps: [
      {
        isHeaderMenuItem: true,
        id,
        label: <FontAwesomeIcon icon={faEllipsisH} />,
        onClick: undefined,
        subMenuItems: [
          {
            isHeaderMenuItem: false,
            id: `${id}_open`,
            label: t('common.open').toString(),
            onClick: handleOpenDiagram,
          },
          {
            isHeaderMenuItem: false,
            id: `${id}_delete`,
            label: t('common.delete').toString(),
            onClick: handleDeleteDiagram,
          },
          {
            isHeaderMenuItem: false,
            id: `${id}_duplicate`,
            label: t('common.duplicate').toString(),
            onClick: handleDuplicateDiagram,
          },
        ],
      },
    ],
  }
}
export default menu
